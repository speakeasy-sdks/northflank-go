// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VcsService - VCS provider the token belongs to.
type VcsService string

const (
	VcsServiceBitbucket  VcsService = "bitbucket"
	VcsServiceGitlab     VcsService = "gitlab"
	VcsServiceGithub     VcsService = "github"
	VcsServiceSelfHosted VcsService = "self-hosted"
)

func (e VcsService) ToPointer() *VcsService {
	return &e
}

func (e *VcsService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "self-hosted":
		*e = VcsService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VcsService: %v", v)
	}
}

// VCSTokenResultData - Result data.
type VCSTokenResultData struct {
	// Installation ID of the GitHub installation the token belongs to (GitHub only)
	InstallationID *int64 `json:"installationId,omitempty"`
	// Installation token (GitHub only).
	InstallationToken *string `json:"installationToken,omitempty"`
	// OAuth token.
	Token string `json:"token"`
	// VCS provider the token belongs to.
	VcsService VcsService `json:"vcsService"`
}

func (o *VCSTokenResultData) GetInstallationID() *int64 {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *VCSTokenResultData) GetInstallationToken() *string {
	if o == nil {
		return nil
	}
	return o.InstallationToken
}

func (o *VCSTokenResultData) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *VCSTokenResultData) GetVcsService() VcsService {
	if o == nil {
		return VcsService("")
	}
	return o.VcsService
}

// VCSTokenResult - Response object.
type VCSTokenResult struct {
	// Result data.
	Data VCSTokenResultData `json:"data"`
}

func (o *VCSTokenResult) GetData() VCSTokenResultData {
	if o == nil {
		return VCSTokenResultData{}
	}
	return o.Data
}
