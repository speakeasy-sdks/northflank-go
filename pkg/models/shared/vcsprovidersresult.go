// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VCSProvidersResultVCSService - The type of version control provider the account is linked to.
type VCSProvidersResultVCSService string

const (
	VCSProvidersResultVCSServiceBitbucket  VCSProvidersResultVCSService = "bitbucket"
	VCSProvidersResultVCSServiceGitlab     VCSProvidersResultVCSService = "gitlab"
	VCSProvidersResultVCSServiceGithub     VCSProvidersResultVCSService = "github"
	VCSProvidersResultVCSServiceSelfHosted VCSProvidersResultVCSService = "self-hosted"
)

func (e VCSProvidersResultVCSService) ToPointer() *VCSProvidersResultVCSService {
	return &e
}

func (e *VCSProvidersResultVCSService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "self-hosted":
		*e = VCSProvidersResultVCSService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VCSProvidersResultVCSService: %v", v)
	}
}

// VcsType - The type of the self-hosted vcs provider. Only returned for self-hosted links.
type VcsType string

const (
	VcsTypeGitlabEe VcsType = "gitlab-ee"
)

func (e VcsType) ToPointer() *VcsType {
	return &e
}

func (e *VcsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab-ee":
		*e = VcsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VcsType: %v", v)
	}
}

// VcsAccountLinks - Details about the linked version control account.
type VcsAccountLinks struct {
	// The email of the account linked with this provider.
	Email string `json:"email"`
	// The name of the team the self-hosted vcs belongs to. Only returned for self-hosted links.
	EntityName *string `json:"entityName,omitempty"`
	// The ID of the self-hosted vcs provider. Only returned for self-hosted links.
	InternalID *string `json:"internalId,omitempty"`
	// The username of the account linked with this provider.
	Login string `json:"login"`
	// The name of the version control provider. Only returned for self-hosted links.
	Name *string `json:"name,omitempty"`
	// The type of version control provider the account is linked to.
	VcsService VCSProvidersResultVCSService `json:"vcsService"`
	// The type of the self-hosted vcs provider. Only returned for self-hosted links.
	VcsType *VcsType `json:"vcsType,omitempty"`
	// The url of the version control provider. Only returned for self-hosted links.
	VcsURL *string `json:"vcsUrl,omitempty"`
}

func (o *VcsAccountLinks) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *VcsAccountLinks) GetEntityName() *string {
	if o == nil {
		return nil
	}
	return o.EntityName
}

func (o *VcsAccountLinks) GetInternalID() *string {
	if o == nil {
		return nil
	}
	return o.InternalID
}

func (o *VcsAccountLinks) GetLogin() string {
	if o == nil {
		return ""
	}
	return o.Login
}

func (o *VcsAccountLinks) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *VcsAccountLinks) GetVcsService() VCSProvidersResultVCSService {
	if o == nil {
		return VCSProvidersResultVCSService("")
	}
	return o.VcsService
}

func (o *VcsAccountLinks) GetVcsType() *VcsType {
	if o == nil {
		return nil
	}
	return o.VcsType
}

func (o *VcsAccountLinks) GetVcsURL() *string {
	if o == nil {
		return nil
	}
	return o.VcsURL
}

// VCSProvidersResultData - Result data.
type VCSProvidersResultData struct {
	// The version control accounts linked to this Northflank account.
	VcsAccountLinks []VcsAccountLinks `json:"vcsAccountLinks"`
}

func (o *VCSProvidersResultData) GetVcsAccountLinks() []VcsAccountLinks {
	if o == nil {
		return []VcsAccountLinks{}
	}
	return o.VcsAccountLinks
}

// VCSProvidersResult - Response object.
type VCSProvidersResult struct {
	// Result data.
	Data VCSProvidersResultData `json:"data"`
}

func (o *VCSProvidersResult) GetData() VCSProvidersResultData {
	if o == nil {
		return VCSProvidersResultData{}
	}
	return o.Data
}
