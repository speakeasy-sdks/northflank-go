// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// VCSProvidersResultDataVCSAccountLinksVCSService - The type of version control provider the account is linked to.
type VCSProvidersResultDataVCSAccountLinksVCSService string

const (
	VCSProvidersResultDataVCSAccountLinksVCSServiceBitbucket  VCSProvidersResultDataVCSAccountLinksVCSService = "bitbucket"
	VCSProvidersResultDataVCSAccountLinksVCSServiceGitlab     VCSProvidersResultDataVCSAccountLinksVCSService = "gitlab"
	VCSProvidersResultDataVCSAccountLinksVCSServiceGithub     VCSProvidersResultDataVCSAccountLinksVCSService = "github"
	VCSProvidersResultDataVCSAccountLinksVCSServiceSelfHosted VCSProvidersResultDataVCSAccountLinksVCSService = "self-hosted"
)

func (e VCSProvidersResultDataVCSAccountLinksVCSService) ToPointer() *VCSProvidersResultDataVCSAccountLinksVCSService {
	return &e
}

func (e *VCSProvidersResultDataVCSAccountLinksVCSService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "self-hosted":
		*e = VCSProvidersResultDataVCSAccountLinksVCSService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VCSProvidersResultDataVCSAccountLinksVCSService: %v", v)
	}
}

// VCSProvidersResultDataVCSAccountLinksVCSType - The type of the self-hosted vcs provider. Only returned for self-hosted links.
type VCSProvidersResultDataVCSAccountLinksVCSType string

const (
	VCSProvidersResultDataVCSAccountLinksVCSTypeGitlabEe VCSProvidersResultDataVCSAccountLinksVCSType = "gitlab-ee"
)

func (e VCSProvidersResultDataVCSAccountLinksVCSType) ToPointer() *VCSProvidersResultDataVCSAccountLinksVCSType {
	return &e
}

func (e *VCSProvidersResultDataVCSAccountLinksVCSType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab-ee":
		*e = VCSProvidersResultDataVCSAccountLinksVCSType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VCSProvidersResultDataVCSAccountLinksVCSType: %v", v)
	}
}

// VCSProvidersResultDataVCSAccountLinks - Details about the linked version control account.
type VCSProvidersResultDataVCSAccountLinks struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The email of the account linked with this provider.
	Email string `json:"email"`
	// The name of the team the self-hosted vcs belongs to. Only returned for self-hosted links.
	EntityName *string `json:"entityName,omitempty"`
	// The ID of the self-hosted vcs provider. Only returned for self-hosted links.
	InternalID *string `json:"internalId,omitempty"`
	// The username of the account linked with this provider.
	Login string `json:"login"`
	// The name of the version control provider. Only returned for self-hosted links.
	Name *string `json:"name,omitempty"`
	// The type of version control provider the account is linked to.
	VcsService VCSProvidersResultDataVCSAccountLinksVCSService `json:"vcsService"`
	// The type of the self-hosted vcs provider. Only returned for self-hosted links.
	VcsType *VCSProvidersResultDataVCSAccountLinksVCSType `json:"vcsType,omitempty"`
	// The url of the version control provider. Only returned for self-hosted links.
	VcsURL *string `json:"vcsUrl,omitempty"`
}

func (v VCSProvidersResultDataVCSAccountLinks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VCSProvidersResultDataVCSAccountLinks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetEntityName() *string {
	if o == nil {
		return nil
	}
	return o.EntityName
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetInternalID() *string {
	if o == nil {
		return nil
	}
	return o.InternalID
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetLogin() string {
	if o == nil {
		return ""
	}
	return o.Login
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetVcsService() VCSProvidersResultDataVCSAccountLinksVCSService {
	if o == nil {
		return VCSProvidersResultDataVCSAccountLinksVCSService("")
	}
	return o.VcsService
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetVcsType() *VCSProvidersResultDataVCSAccountLinksVCSType {
	if o == nil {
		return nil
	}
	return o.VcsType
}

func (o *VCSProvidersResultDataVCSAccountLinks) GetVcsURL() *string {
	if o == nil {
		return nil
	}
	return o.VcsURL
}

// VCSProvidersResultData - Result data.
type VCSProvidersResultData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The version control accounts linked to this Northflank account.
	VcsAccountLinks []VCSProvidersResultDataVCSAccountLinks `json:"vcsAccountLinks"`
}

func (v VCSProvidersResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VCSProvidersResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VCSProvidersResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *VCSProvidersResultData) GetVcsAccountLinks() []VCSProvidersResultDataVCSAccountLinks {
	if o == nil {
		return []VCSProvidersResultDataVCSAccountLinks{}
	}
	return o.VcsAccountLinks
}

// VCSProvidersResult - Response object.
type VCSProvidersResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data VCSProvidersResultData `json:"data"`
}

func (v VCSProvidersResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VCSProvidersResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VCSProvidersResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *VCSProvidersResult) GetData() VCSProvidersResultData {
	if o == nil {
		return VCSProvidersResultData{}
	}
	return o.Data
}
