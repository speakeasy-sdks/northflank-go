// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
	"time"
)

// CreateClusterResultDataNodePoolsAutoscaling - Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
type CreateClusterResultDataNodePoolsAutoscaling struct {
	Enabled *bool  `default:"false" json:"enabled"`
	Max     *int64 `json:"max,omitempty"`
	Min     *int64 `json:"min,omitempty"`
}

func (c CreateClusterResultDataNodePoolsAutoscaling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateClusterResultDataNodePoolsAutoscaling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateClusterResultDataNodePoolsAutoscaling) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateClusterResultDataNodePoolsAutoscaling) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *CreateClusterResultDataNodePoolsAutoscaling) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

// CreateClusterResultDataNodePoolsLabels - Set of label keys and values that can be used to determine scheduling via resource tags.
type CreateClusterResultDataNodePoolsLabels struct {
}

type CreateClusterResultDataNodePools struct {
	// Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
	Autoscaling *CreateClusterResultDataNodePoolsAutoscaling `json:"autoscaling,omitempty"`
	// Zones in which the node pool should be provisioned.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Disk size in GB
	DiskSize int64 `json:"diskSize"`
	// The disk type to use.
	DiskType *string `json:"diskType,omitempty"`
	// ID of existing node pool. Must be passed when modifying existing node pools. Not relevant for new node pools
	ID *string `json:"id,omitempty"`
	// Set of label keys and values that can be used to determine scheduling via resource tags.
	Labels *CreateClusterResultDataNodePoolsLabels `json:"labels,omitempty"`
	// Number of nodes to the node pool should be provisioned with.
	NodeCount int64 `json:"nodeCount"`
	// Machine type to be used by the node pool.
	NodeType string `json:"nodeType"`
	// Configures node pool with preemptible / spot instances if enabled.
	Preemptible *bool `default:"false" json:"preemptible"`
	// When 'provider' is 'azure', at least one system node pool is required per cluster.
	SystemPool *bool `json:"systemPool,omitempty"`
}

func (c CreateClusterResultDataNodePools) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateClusterResultDataNodePools) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateClusterResultDataNodePools) GetAutoscaling() *CreateClusterResultDataNodePoolsAutoscaling {
	if o == nil {
		return nil
	}
	return o.Autoscaling
}

func (o *CreateClusterResultDataNodePools) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *CreateClusterResultDataNodePools) GetDiskSize() int64 {
	if o == nil {
		return 0
	}
	return o.DiskSize
}

func (o *CreateClusterResultDataNodePools) GetDiskType() *string {
	if o == nil {
		return nil
	}
	return o.DiskType
}

func (o *CreateClusterResultDataNodePools) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateClusterResultDataNodePools) GetLabels() *CreateClusterResultDataNodePoolsLabels {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateClusterResultDataNodePools) GetNodeCount() int64 {
	if o == nil {
		return 0
	}
	return o.NodeCount
}

func (o *CreateClusterResultDataNodePools) GetNodeType() string {
	if o == nil {
		return ""
	}
	return o.NodeType
}

func (o *CreateClusterResultDataNodePools) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *CreateClusterResultDataNodePools) GetSystemPool() *bool {
	if o == nil {
		return nil
	}
	return o.SystemPool
}

type CreateClusterResultDataStatusState struct {
	State          *string    `json:"state,omitempty"`
	TransitionTime *time.Time `json:"transitionTime,omitempty"`
}

func (c CreateClusterResultDataStatusState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateClusterResultDataStatusState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateClusterResultDataStatusState) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *CreateClusterResultDataStatusState) GetTransitionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransitionTime
}

type CreateClusterResultDataStatus struct {
	NextUpdateAfter *time.Time                          `json:"nextUpdateAfter,omitempty"`
	State           *CreateClusterResultDataStatusState `json:"state,omitempty"`
}

func (c CreateClusterResultDataStatus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateClusterResultDataStatus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateClusterResultDataStatus) GetNextUpdateAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextUpdateAfter
}

func (o *CreateClusterResultDataStatus) GetState() *CreateClusterResultDataStatusState {
	if o == nil {
		return nil
	}
	return o.State
}

// CreateClusterResultData - Result data.
type CreateClusterResultData struct {
	// The time the cluster was created.
	CreatedAt time.Time `json:"createdAt"`
	// Indicates if provider resource deletion has been requested by the user.
	DeletionRequested bool `json:"deletionRequested"`
	// A short description of the cluster.
	Description *string `json:"description,omitempty"`
	// Identifier for the cluster.
	ID string `json:"id"`
	// ID of the provider integration used by this cluster.
	IntegrationID string `json:"integrationId"`
	// The name of the cluster.
	Name      string                           `json:"name"`
	NodePools CreateClusterResultDataNodePools `json:"nodePools"`
	// The cloud provider to which this cluster belongs to.
	Provider *string                        `json:"provider,omitempty"`
	Status   *CreateClusterResultDataStatus `json:"status,omitempty"`
}

func (c CreateClusterResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateClusterResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateClusterResultData) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateClusterResultData) GetDeletionRequested() bool {
	if o == nil {
		return false
	}
	return o.DeletionRequested
}

func (o *CreateClusterResultData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateClusterResultData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateClusterResultData) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateClusterResultData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateClusterResultData) GetNodePools() CreateClusterResultDataNodePools {
	if o == nil {
		return CreateClusterResultDataNodePools{}
	}
	return o.NodePools
}

func (o *CreateClusterResultData) GetProvider() *string {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *CreateClusterResultData) GetStatus() *CreateClusterResultDataStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

// CreateClusterResult - Response object.
type CreateClusterResult struct {
	// Result data.
	Data CreateClusterResultData `json:"data"`
}

func (o *CreateClusterResult) GetData() CreateClusterResultData {
	if o == nil {
		return CreateClusterResultData{}
	}
	return o.Data
}
