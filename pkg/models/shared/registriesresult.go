// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// RegistriesResultDataCredentialsProvider - The registry provider associated with this set of credentials.
type RegistriesResultDataCredentialsProvider string

const (
	RegistriesResultDataCredentialsProviderDockerhub RegistriesResultDataCredentialsProvider = "dockerhub"
	RegistriesResultDataCredentialsProviderGcr       RegistriesResultDataCredentialsProvider = "gcr"
	RegistriesResultDataCredentialsProviderGcrEu     RegistriesResultDataCredentialsProvider = "gcr-eu"
	RegistriesResultDataCredentialsProviderGcrUs     RegistriesResultDataCredentialsProvider = "gcr-us"
	RegistriesResultDataCredentialsProviderGitlab    RegistriesResultDataCredentialsProvider = "gitlab"
	RegistriesResultDataCredentialsProviderGithub    RegistriesResultDataCredentialsProvider = "github"
	RegistriesResultDataCredentialsProviderCustom    RegistriesResultDataCredentialsProvider = "custom"
)

func (e RegistriesResultDataCredentialsProvider) ToPointer() *RegistriesResultDataCredentialsProvider {
	return &e
}

func (e *RegistriesResultDataCredentialsProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dockerhub":
		fallthrough
	case "gcr":
		fallthrough
	case "gcr-eu":
		fallthrough
	case "gcr-us":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "custom":
		*e = RegistriesResultDataCredentialsProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistriesResultDataCredentialsProvider: %v", v)
	}
}

// RegistriesResultDataCredentialsRestrictions - Data about whether the credentials are restricted to certain projects.
type RegistriesResultDataCredentialsRestrictions struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// An array of projects the credentials are restricted to, if applicable.
	Projects []string `json:"projects"`
	// Whether the credentials are restricted to specific projects.
	Restricted bool `json:"restricted"`
}

func (r RegistriesResultDataCredentialsRestrictions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistriesResultDataCredentialsRestrictions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistriesResultDataCredentialsRestrictions) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistriesResultDataCredentialsRestrictions) GetProjects() []string {
	if o == nil {
		return []string{}
	}
	return o.Projects
}

func (o *RegistriesResultDataCredentialsRestrictions) GetRestricted() bool {
	if o == nil {
		return false
	}
	return o.Restricted
}

type RegistriesResultDataCredentials struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Description of the saved credentials.
	Description string `json:"description"`
	// Identifier for the credentials.
	ID string `json:"id"`
	// Name of the saved credentials.
	Name string `json:"name"`
	// The registry provider associated with this set of credentials.
	Provider RegistriesResultDataCredentialsProvider `json:"provider"`
	// Data about whether the credentials are restricted to certain projects.
	Restrictions RegistriesResultDataCredentialsRestrictions `json:"restrictions"`
}

func (r RegistriesResultDataCredentials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistriesResultDataCredentials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistriesResultDataCredentials) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistriesResultDataCredentials) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *RegistriesResultDataCredentials) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RegistriesResultDataCredentials) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RegistriesResultDataCredentials) GetProvider() RegistriesResultDataCredentialsProvider {
	if o == nil {
		return RegistriesResultDataCredentialsProvider("")
	}
	return o.Provider
}

func (o *RegistriesResultDataCredentials) GetRestrictions() RegistriesResultDataCredentialsRestrictions {
	if o == nil {
		return RegistriesResultDataCredentialsRestrictions{}
	}
	return o.Restrictions
}

// RegistriesResultData - Result data.
type RegistriesResultData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// An array of credentials saved to this account.
	Credentials []RegistriesResultDataCredentials `json:"credentials"`
}

func (r RegistriesResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistriesResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistriesResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistriesResultData) GetCredentials() []RegistriesResultDataCredentials {
	if o == nil {
		return []RegistriesResultDataCredentials{}
	}
	return o.Credentials
}

// RegistriesResultPagination - Data about the endpoint pagination.
type RegistriesResultPagination struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The number of results returned by this request.
	Count float32 `json:"count"`
	// The cursor to access the next page of results.
	Cursor *string `json:"cursor,omitempty"`
	// Is there another page of results available?
	HasNextPage bool `json:"hasNextPage"`
}

func (r RegistriesResultPagination) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistriesResultPagination) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistriesResultPagination) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistriesResultPagination) GetCount() float32 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *RegistriesResultPagination) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *RegistriesResultPagination) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// RegistriesResult - Response object.
type RegistriesResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data RegistriesResultData `json:"data"`
	// Data about the endpoint pagination.
	Pagination RegistriesResultPagination `json:"pagination"`
}

func (r RegistriesResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistriesResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistriesResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistriesResult) GetData() RegistriesResultData {
	if o == nil {
		return RegistriesResultData{}
	}
	return o.Data
}

func (o *RegistriesResult) GetPagination() RegistriesResultPagination {
	if o == nil {
		return RegistriesResultPagination{}
	}
	return o.Pagination
}
