// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v3/pkg/utils"
)

// Strategy - The authentication strategy.
type Strategy string

const (
	StrategyBasic Strategy = "basic"
)

func (e Strategy) ToPointer() *Strategy {
	return &e
}

func (e *Strategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = Strategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Strategy: %v", v)
	}
}

// LokiLogSinkAuth - Object containing authentication data for the log sink.
type LokiLogSinkAuth struct {
	// The password for the log sink.
	Password *string `json:"password,omitempty"`
	// The authentication strategy.
	Strategy *Strategy `json:"strategy,omitempty"`
	// The username for the log sink.
	User *string `json:"user,omitempty"`
}

func (o *LokiLogSinkAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LokiLogSinkAuth) GetStrategy() *Strategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *LokiLogSinkAuth) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

// LokiLogSinkCodec - Codec to encode logs in
type LokiLogSinkCodec string

const (
	LokiLogSinkCodecText LokiLogSinkCodec = "text"
	LokiLogSinkCodecJSON LokiLogSinkCodec = "json"
)

func (e LokiLogSinkCodec) ToPointer() *LokiLogSinkCodec {
	return &e
}

func (e *LokiLogSinkCodec) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "json":
		*e = LokiLogSinkCodec(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LokiLogSinkCodec: %v", v)
	}
}

// LokiLogSinkEncoding - Encoding options
type LokiLogSinkEncoding struct {
	// Codec to encode logs in
	Codec LokiLogSinkCodec `json:"codec"`
}

func (o *LokiLogSinkEncoding) GetCodec() LokiLogSinkCodec {
	if o == nil {
		return LokiLogSinkCodec("")
	}
	return o.Codec
}

// LokiLogSinkSinkData - Details about the Loki log sink.
type LokiLogSinkSinkData struct {
	// Object containing authentication data for the log sink.
	Auth *LokiLogSinkAuth `json:"auth,omitempty"`
	// Encoding options
	Encoding *LokiLogSinkEncoding `json:"encoding,omitempty"`
	// The endpoint of the Loki log sink.
	Endpoint string `json:"endpoint"`
}

func (o *LokiLogSinkSinkData) GetAuth() *LokiLogSinkAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *LokiLogSinkSinkData) GetEncoding() *LokiLogSinkEncoding {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *LokiLogSinkSinkData) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

// LokiLogSinkSinkType - The type of the log sink.
type LokiLogSinkSinkType string

const (
	LokiLogSinkSinkTypeLoki LokiLogSinkSinkType = "loki"
)

func (e LokiLogSinkSinkType) ToPointer() *LokiLogSinkSinkType {
	return &e
}

func (e *LokiLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "loki":
		*e = LokiLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LokiLogSinkSinkType: %v", v)
	}
}

// LokiLogSink - Create a log sink using Loki
type LokiLogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Details about the Loki log sink.
	SinkData LokiLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType LokiLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (l LokiLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LokiLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *LokiLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LokiLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *LokiLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LokiLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *LokiLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *LokiLogSink) GetSinkData() LokiLogSinkSinkData {
	if o == nil {
		return LokiLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *LokiLogSink) GetSinkType() LokiLogSinkSinkType {
	if o == nil {
		return LokiLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *LokiLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
