// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// HoneycombLogSinkSinkData - Details about the Honeycomb log sink.
type HoneycombLogSinkSinkData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Honeycomb API Key
	APIKey string `json:"api_key"`
	// Name of the dataset
	Dataset string `json:"dataset"`
}

func (h HoneycombLogSinkSinkData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HoneycombLogSinkSinkData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HoneycombLogSinkSinkData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *HoneycombLogSinkSinkData) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *HoneycombLogSinkSinkData) GetDataset() string {
	if o == nil {
		return ""
	}
	return o.Dataset
}

// HoneycombLogSinkSinkType - The type of the log sink.
type HoneycombLogSinkSinkType string

const (
	HoneycombLogSinkSinkTypeHoneycomb HoneycombLogSinkSinkType = "honeycomb"
)

func (e HoneycombLogSinkSinkType) ToPointer() *HoneycombLogSinkSinkType {
	return &e
}

func (e *HoneycombLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "honeycomb":
		*e = HoneycombLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HoneycombLogSinkSinkType: %v", v)
	}
}

// HoneycombLogSink - Create a log sink using Honeycomb
type HoneycombLogSink struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Details about the Honeycomb log sink.
	SinkData HoneycombLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType HoneycombLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (h HoneycombLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HoneycombLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *HoneycombLogSink) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *HoneycombLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *HoneycombLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *HoneycombLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *HoneycombLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *HoneycombLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *HoneycombLogSink) GetSinkData() HoneycombLogSinkSinkData {
	if o == nil {
		return HoneycombLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *HoneycombLogSink) GetSinkType() HoneycombLogSinkSinkType {
	if o == nil {
		return HoneycombLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *HoneycombLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
