// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RepositoriesResultDataReposOwner - Details about the repository owner.
type RepositoriesResultDataReposOwner struct {
	// The login of the repository owner.
	Login string `json:"login"`
}

func (o *RepositoriesResultDataReposOwner) GetLogin() string {
	if o == nil {
		return ""
	}
	return o.Login
}

// RepositoriesResultDataReposVcsService - Version control provider of the repository.
type RepositoriesResultDataReposVcsService string

const (
	RepositoriesResultDataReposVcsServiceBitbucket  RepositoriesResultDataReposVcsService = "bitbucket"
	RepositoriesResultDataReposVcsServiceGitlab     RepositoriesResultDataReposVcsService = "gitlab"
	RepositoriesResultDataReposVcsServiceGithub     RepositoriesResultDataReposVcsService = "github"
	RepositoriesResultDataReposVcsServiceSelfHosted RepositoriesResultDataReposVcsService = "self-hosted"
)

func (e RepositoriesResultDataReposVcsService) ToPointer() *RepositoriesResultDataReposVcsService {
	return &e
}

func (e *RepositoriesResultDataReposVcsService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "self-hosted":
		*e = RepositoriesResultDataReposVcsService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoriesResultDataReposVcsService: %v", v)
	}
}

// RepositoriesResultDataRepos - Details about an accessible repository.
type RepositoriesResultDataRepos struct {
	// The login of the linked version control account that can access this repository.
	AccountLogin string `json:"accountLogin"`
	// The full name of the repository.
	FullName string `json:"full_name"`
	// The ID of the repository from the version control provider. This is always returned from the Northflank API as a string for consistency across providers. This value is the numerical ID of a GitHub repository, the numerical ID of a GitLab project, or the UUID of a Bitbucket repository.
	ID string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
	// Details about the repository owner.
	Owner RepositoriesResultDataReposOwner `json:"owner"`
	// If `vcsService` is `self-hosted`, the ID of the self-hosted provider.
	SelfHostedVcsID *string `json:"selfHostedVcsId,omitempty"`
	// The url of the repository.
	URL string `json:"url"`
	// Version control provider of the repository.
	VcsService RepositoriesResultDataReposVcsService `json:"vcsService"`
}

func (o *RepositoriesResultDataRepos) GetAccountLogin() string {
	if o == nil {
		return ""
	}
	return o.AccountLogin
}

func (o *RepositoriesResultDataRepos) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *RepositoriesResultDataRepos) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RepositoriesResultDataRepos) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RepositoriesResultDataRepos) GetOwner() RepositoriesResultDataReposOwner {
	if o == nil {
		return RepositoriesResultDataReposOwner{}
	}
	return o.Owner
}

func (o *RepositoriesResultDataRepos) GetSelfHostedVcsID() *string {
	if o == nil {
		return nil
	}
	return o.SelfHostedVcsID
}

func (o *RepositoriesResultDataRepos) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *RepositoriesResultDataRepos) GetVcsService() RepositoriesResultDataReposVcsService {
	if o == nil {
		return RepositoriesResultDataReposVcsService("")
	}
	return o.VcsService
}

// RepositoriesResultData - Result data.
type RepositoriesResultData struct {
	// A list of accessible repositories.
	Repos []RepositoriesResultDataRepos `json:"repos,omitempty"`
}

func (o *RepositoriesResultData) GetRepos() []RepositoriesResultDataRepos {
	if o == nil {
		return nil
	}
	return o.Repos
}

// RepositoriesResultPagination - Data about the endpoint pagination.
type RepositoriesResultPagination struct {
	// The number of results returned by this request.
	Count float32 `json:"count"`
	// The cursor to access the next page of results.
	Cursor *string `json:"cursor,omitempty"`
	// Is there another page of results available?
	HasNextPage bool `json:"hasNextPage"`
}

func (o *RepositoriesResultPagination) GetCount() float32 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *RepositoriesResultPagination) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *RepositoriesResultPagination) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// RepositoriesResult - Response object.
type RepositoriesResult struct {
	// Result data.
	Data RepositoriesResultData `json:"data"`
	// Data about the endpoint pagination.
	Pagination RepositoriesResultPagination `json:"pagination"`
}

func (o *RepositoriesResult) GetData() RepositoriesResultData {
	if o == nil {
		return RepositoriesResultData{}
	}
	return o.Data
}

func (o *RepositoriesResult) GetPagination() RepositoriesResultPagination {
	if o == nil {
		return RepositoriesResultPagination{}
	}
	return o.Pagination
}
