// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v3/pkg/utils"
	"time"
)

// GetLogSinksResultSinkType - The type of the log sink.
type GetLogSinksResultSinkType string

const (
	GetLogSinksResultSinkTypeLoki        GetLogSinksResultSinkType = "loki"
	GetLogSinksResultSinkTypeDatadogLogs GetLogSinksResultSinkType = "datadog_logs"
	GetLogSinksResultSinkTypePapertrail  GetLogSinksResultSinkType = "papertrail"
	GetLogSinksResultSinkTypeHTTP        GetLogSinksResultSinkType = "http"
	GetLogSinksResultSinkTypeAwsS3       GetLogSinksResultSinkType = "aws_s3"
	GetLogSinksResultSinkTypeLogdna      GetLogSinksResultSinkType = "logdna"
	GetLogSinksResultSinkTypeCoralogix   GetLogSinksResultSinkType = "coralogix"
	GetLogSinksResultSinkTypeLogtail     GetLogSinksResultSinkType = "logtail"
	GetLogSinksResultSinkTypeHoneycomb   GetLogSinksResultSinkType = "honeycomb"
	GetLogSinksResultSinkTypeLogzio      GetLogSinksResultSinkType = "logzio"
)

func (e GetLogSinksResultSinkType) ToPointer() *GetLogSinksResultSinkType {
	return &e
}

func (e *GetLogSinksResultSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "loki":
		fallthrough
	case "datadog_logs":
		fallthrough
	case "papertrail":
		fallthrough
	case "http":
		fallthrough
	case "aws_s3":
		fallthrough
	case "logdna":
		fallthrough
	case "coralogix":
		fallthrough
	case "logtail":
		fallthrough
	case "honeycomb":
		fallthrough
	case "logzio":
		*e = GetLogSinksResultSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLogSinksResultSinkType: %v", v)
	}
}

// LogSinks - A log sink object.
type LogSinks struct {
	// Timestamp of when the log sink was created.
	CreatedAt time.Time `json:"createdAt"`
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// Identifier for the Log Sink
	ID string `json:"id"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted bool `json:"restricted"`
	// The type of the log sink.
	SinkType GetLogSinksResultSinkType `json:"sinkType"`
	// Timestamp of when the log sink was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (l LogSinks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogSinks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LogSinks) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *LogSinks) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LogSinks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LogSinks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LogSinks) GetProjects() []string {
	if o == nil {
		return []string{}
	}
	return o.Projects
}

func (o *LogSinks) GetRestricted() bool {
	if o == nil {
		return false
	}
	return o.Restricted
}

func (o *LogSinks) GetSinkType() GetLogSinksResultSinkType {
	if o == nil {
		return GetLogSinksResultSinkType("")
	}
	return o.SinkType
}

func (o *LogSinks) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *LogSinks) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}

// GetLogSinksResultData - Result data.
type GetLogSinksResultData struct {
	// An array of log sinks added to this account.
	LogSinks []LogSinks `json:"logSinks"`
}

func (o *GetLogSinksResultData) GetLogSinks() []LogSinks {
	if o == nil {
		return []LogSinks{}
	}
	return o.LogSinks
}

// GetLogSinksResultPagination - Data about the endpoint pagination.
type GetLogSinksResultPagination struct {
	// The number of results returned by this request.
	Count float32 `json:"count"`
	// The cursor to access the next page of results.
	Cursor *string `json:"cursor,omitempty"`
	// Is there another page of results available?
	HasNextPage bool `json:"hasNextPage"`
}

func (o *GetLogSinksResultPagination) GetCount() float32 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *GetLogSinksResultPagination) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *GetLogSinksResultPagination) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// GetLogSinksResult - Response object.
type GetLogSinksResult struct {
	// Result data.
	Data GetLogSinksResultData `json:"data"`
	// Data about the endpoint pagination.
	Pagination GetLogSinksResultPagination `json:"pagination"`
}

func (o *GetLogSinksResult) GetData() GetLogSinksResultData {
	if o == nil {
		return GetLogSinksResultData{}
	}
	return o.Data
}

func (o *GetLogSinksResult) GetPagination() GetLogSinksResultPagination {
	if o == nil {
		return GetLogSinksResultPagination{}
	}
	return o.Pagination
}
