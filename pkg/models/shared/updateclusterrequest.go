// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// UpdateClusterRequestNodePoolsAutoscaling - Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
type UpdateClusterRequestNodePoolsAutoscaling struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	Enabled              *bool                  `default:"false" json:"enabled"`
	Max                  *int64                 `json:"max,omitempty"`
	Min                  *int64                 `json:"min,omitempty"`
}

func (u UpdateClusterRequestNodePoolsAutoscaling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestNodePoolsAutoscaling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestNodePoolsAutoscaling) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestNodePoolsAutoscaling) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateClusterRequestNodePoolsAutoscaling) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *UpdateClusterRequestNodePoolsAutoscaling) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

type UpdateClusterRequestNodePools struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
	Autoscaling *UpdateClusterRequestNodePoolsAutoscaling `json:"autoscaling,omitempty"`
	// Zones in which the node pool should be provisioned.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Disk size in GB
	DiskSize int64 `json:"diskSize"`
	// The disk type to use.
	DiskType *string `json:"diskType,omitempty"`
	// ID of existing node pool. Must be passed when modifying existing node pools. Not relevant for new node pools
	ID *string `json:"id,omitempty"`
	// Set of label keys and values that can be used to determine scheduling via resource tags.
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Number of nodes to the node pool should be provisioned with.
	NodeCount int64 `json:"nodeCount"`
	// Machine type to be used by the node pool.
	NodeType string `json:"nodeType"`
	// Configures node pool with preemptible / spot instances if enabled.
	Preemptible *bool `default:"false" json:"preemptible"`
	// When 'provider' is 'azure', at least one system node pool is required per cluster.
	SystemPool *bool `json:"systemPool,omitempty"`
}

func (u UpdateClusterRequestNodePools) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestNodePools) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestNodePools) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestNodePools) GetAutoscaling() *UpdateClusterRequestNodePoolsAutoscaling {
	if o == nil {
		return nil
	}
	return o.Autoscaling
}

func (o *UpdateClusterRequestNodePools) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *UpdateClusterRequestNodePools) GetDiskSize() int64 {
	if o == nil {
		return 0
	}
	return o.DiskSize
}

func (o *UpdateClusterRequestNodePools) GetDiskType() *string {
	if o == nil {
		return nil
	}
	return o.DiskType
}

func (o *UpdateClusterRequestNodePools) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateClusterRequestNodePools) GetLabels() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *UpdateClusterRequestNodePools) GetNodeCount() int64 {
	if o == nil {
		return 0
	}
	return o.NodeCount
}

func (o *UpdateClusterRequestNodePools) GetNodeType() string {
	if o == nil {
		return ""
	}
	return o.NodeType
}

func (o *UpdateClusterRequestNodePools) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *UpdateClusterRequestNodePools) GetSystemPool() *bool {
	if o == nil {
		return nil
	}
	return o.SystemPool
}

type UpdateClusterRequestSettingsBuildsMode string

const (
	UpdateClusterRequestSettingsBuildsModePaas         UpdateClusterRequestSettingsBuildsMode = "paas"
	UpdateClusterRequestSettingsBuildsModeInternal     UpdateClusterRequestSettingsBuildsMode = "internal"
	UpdateClusterRequestSettingsBuildsModeBuildCluster UpdateClusterRequestSettingsBuildsMode = "build-cluster"
)

func (e UpdateClusterRequestSettingsBuildsMode) ToPointer() *UpdateClusterRequestSettingsBuildsMode {
	return &e
}

func (e *UpdateClusterRequestSettingsBuildsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "internal":
		fallthrough
	case "build-cluster":
		*e = UpdateClusterRequestSettingsBuildsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateClusterRequestSettingsBuildsMode: %v", v)
	}
}

type UpdateClusterRequestSettingsBuilds struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Cluster to use for scheduling builds
	ClusterID *string                                 `json:"clusterId,omitempty"`
	Mode      *UpdateClusterRequestSettingsBuildsMode `json:"mode,omitempty"`
	// Plan to use for builds if they are run on the cluster
	Plan *string `json:"plan,omitempty"`
}

func (u UpdateClusterRequestSettingsBuilds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestSettingsBuilds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestSettingsBuilds) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestSettingsBuilds) GetClusterID() *string {
	if o == nil {
		return nil
	}
	return o.ClusterID
}

func (o *UpdateClusterRequestSettingsBuilds) GetMode() *UpdateClusterRequestSettingsBuildsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *UpdateClusterRequestSettingsBuilds) GetPlan() *string {
	if o == nil {
		return nil
	}
	return o.Plan
}

type UpdateClusterRequestSettingsLoggingLoki1 struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	S3AccessKey          string                 `json:"s3AccessKey"`
	S3BucketName         string                 `json:"s3BucketName"`
	S3Region             string                 `json:"s3Region"`
	S3SecretKey          string                 `json:"s3SecretKey"`
}

func (u UpdateClusterRequestSettingsLoggingLoki1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestSettingsLoggingLoki1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestSettingsLoggingLoki1) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestSettingsLoggingLoki1) GetS3AccessKey() string {
	if o == nil {
		return ""
	}
	return o.S3AccessKey
}

func (o *UpdateClusterRequestSettingsLoggingLoki1) GetS3BucketName() string {
	if o == nil {
		return ""
	}
	return o.S3BucketName
}

func (o *UpdateClusterRequestSettingsLoggingLoki1) GetS3Region() string {
	if o == nil {
		return ""
	}
	return o.S3Region
}

func (o *UpdateClusterRequestSettingsLoggingLoki1) GetS3SecretKey() string {
	if o == nil {
		return ""
	}
	return o.S3SecretKey
}

type UpdateClusterRequestSettingsLoggingLokiType string

const (
	UpdateClusterRequestSettingsLoggingLokiTypeUpdateClusterRequestSettingsLoggingLoki1 UpdateClusterRequestSettingsLoggingLokiType = "UpdateClusterRequest_settings_logging_loki_1"
	UpdateClusterRequestSettingsLoggingLokiTypeMapOfany                                 UpdateClusterRequestSettingsLoggingLokiType = "mapOfany"
)

type UpdateClusterRequestSettingsLoggingLoki struct {
	UpdateClusterRequestSettingsLoggingLoki1 *UpdateClusterRequestSettingsLoggingLoki1
	MapOfany                                 map[string]interface{}

	Type UpdateClusterRequestSettingsLoggingLokiType
}

func CreateUpdateClusterRequestSettingsLoggingLokiUpdateClusterRequestSettingsLoggingLoki1(updateClusterRequestSettingsLoggingLoki1 UpdateClusterRequestSettingsLoggingLoki1) UpdateClusterRequestSettingsLoggingLoki {
	typ := UpdateClusterRequestSettingsLoggingLokiTypeUpdateClusterRequestSettingsLoggingLoki1

	return UpdateClusterRequestSettingsLoggingLoki{
		UpdateClusterRequestSettingsLoggingLoki1: &updateClusterRequestSettingsLoggingLoki1,
		Type:                                     typ,
	}
}

func CreateUpdateClusterRequestSettingsLoggingLokiMapOfany(mapOfany map[string]interface{}) UpdateClusterRequestSettingsLoggingLoki {
	typ := UpdateClusterRequestSettingsLoggingLokiTypeMapOfany

	return UpdateClusterRequestSettingsLoggingLoki{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *UpdateClusterRequestSettingsLoggingLoki) UnmarshalJSON(data []byte) error {

	updateClusterRequestSettingsLoggingLoki1 := new(UpdateClusterRequestSettingsLoggingLoki1)
	if err := utils.UnmarshalJSON(data, &updateClusterRequestSettingsLoggingLoki1, "", true, true); err == nil {
		u.UpdateClusterRequestSettingsLoggingLoki1 = updateClusterRequestSettingsLoggingLoki1
		u.Type = UpdateClusterRequestSettingsLoggingLokiTypeUpdateClusterRequestSettingsLoggingLoki1
		return nil
	}

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = UpdateClusterRequestSettingsLoggingLokiTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateClusterRequestSettingsLoggingLoki) MarshalJSON() ([]byte, error) {
	if u.UpdateClusterRequestSettingsLoggingLoki1 != nil {
		return utils.MarshalJSON(u.UpdateClusterRequestSettingsLoggingLoki1, "", true)
	}

	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateClusterRequestSettingsLoggingMode string

const (
	UpdateClusterRequestSettingsLoggingModePaas UpdateClusterRequestSettingsLoggingMode = "paas"
	UpdateClusterRequestSettingsLoggingModeLoki UpdateClusterRequestSettingsLoggingMode = "loki"
)

func (e UpdateClusterRequestSettingsLoggingMode) ToPointer() *UpdateClusterRequestSettingsLoggingMode {
	return &e
}

func (e *UpdateClusterRequestSettingsLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "loki":
		*e = UpdateClusterRequestSettingsLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateClusterRequestSettingsLoggingMode: %v", v)
	}
}

type UpdateClusterRequestSettingsLogging struct {
	AdditionalProperties map[string]interface{}                   `additionalProperties:"true" json:"-"`
	Loki                 *UpdateClusterRequestSettingsLoggingLoki `json:"loki,omitempty"`
	Mode                 *UpdateClusterRequestSettingsLoggingMode `json:"mode,omitempty"`
}

func (u UpdateClusterRequestSettingsLogging) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestSettingsLogging) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestSettingsLogging) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestSettingsLogging) GetLoki() *UpdateClusterRequestSettingsLoggingLoki {
	if o == nil {
		return nil
	}
	return o.Loki
}

func (o *UpdateClusterRequestSettingsLogging) GetMode() *UpdateClusterRequestSettingsLoggingMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

type UpdateClusterRequestSettingsRegistryMode string

const (
	UpdateClusterRequestSettingsRegistryModePaas       UpdateClusterRequestSettingsRegistryMode = "paas"
	UpdateClusterRequestSettingsRegistryModeSelfHosted UpdateClusterRequestSettingsRegistryMode = "self-hosted"
)

func (e UpdateClusterRequestSettingsRegistryMode) ToPointer() *UpdateClusterRequestSettingsRegistryMode {
	return &e
}

func (e *UpdateClusterRequestSettingsRegistryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "self-hosted":
		*e = UpdateClusterRequestSettingsRegistryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateClusterRequestSettingsRegistryMode: %v", v)
	}
}

type UpdateClusterRequestSettingsRegistry struct {
	AdditionalProperties map[string]interface{}                    `additionalProperties:"true" json:"-"`
	Mode                 *UpdateClusterRequestSettingsRegistryMode `json:"mode,omitempty"`
	// Credentials to use for storing of images.
	RegistryID *string `json:"registryId,omitempty"`
}

func (u UpdateClusterRequestSettingsRegistry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestSettingsRegistry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestSettingsRegistry) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestSettingsRegistry) GetMode() *UpdateClusterRequestSettingsRegistryMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *UpdateClusterRequestSettingsRegistry) GetRegistryID() *string {
	if o == nil {
		return nil
	}
	return o.RegistryID
}

type UpdateClusterRequestSettings struct {
	AdditionalProperties map[string]interface{}                `additionalProperties:"true" json:"-"`
	Builds               *UpdateClusterRequestSettingsBuilds   `json:"builds,omitempty"`
	Logging              *UpdateClusterRequestSettingsLogging  `json:"logging,omitempty"`
	Registry             *UpdateClusterRequestSettingsRegistry `json:"registry,omitempty"`
}

func (u UpdateClusterRequestSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequestSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequestSettings) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequestSettings) GetBuilds() *UpdateClusterRequestSettingsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateClusterRequestSettings) GetLogging() *UpdateClusterRequestSettingsLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *UpdateClusterRequestSettings) GetRegistry() *UpdateClusterRequestSettingsRegistry {
	if o == nil {
		return nil
	}
	return o.Registry
}

type UpdateClusterRequest struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The description of the cluster.
	Description *string                         `json:"description,omitempty"`
	NodePools   []UpdateClusterRequestNodePools `json:"nodePools,omitempty"`
	Settings    *UpdateClusterRequestSettings   `json:"settings,omitempty"`
}

func (u UpdateClusterRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateClusterRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateClusterRequest) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *UpdateClusterRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateClusterRequest) GetNodePools() []UpdateClusterRequestNodePools {
	if o == nil {
		return nil
	}
	return o.NodePools
}

func (o *UpdateClusterRequest) GetSettings() *UpdateClusterRequestSettings {
	if o == nil {
		return nil
	}
	return o.Settings
}
