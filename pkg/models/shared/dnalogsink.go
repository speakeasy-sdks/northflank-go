// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DNALogSinkSinkData - Details about the LogDNA log sink.
type DNALogSinkSinkData struct {
	// Ingestion Key
	APIKey string `json:"api_key"`
}

func (o *DNALogSinkSinkData) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

// DNALogSinkSinkType - The type of the log sink.
type DNALogSinkSinkType string

const (
	DNALogSinkSinkTypeLogdna DNALogSinkSinkType = "logdna"
)

func (e DNALogSinkSinkType) ToPointer() *DNALogSinkSinkType {
	return &e
}

func (e *DNALogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "logdna":
		*e = DNALogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DNALogSinkSinkType: %v", v)
	}
}

// DNALogSink - Create a log sink using LogDNA
type DNALogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `json:"forwardAccessLogs,omitempty"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `json:"restricted,omitempty"`
	// Details about the LogDNA log sink.
	SinkData DNALogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType DNALogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `json:"useCustomLabels,omitempty"`
}

func (o *DNALogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DNALogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *DNALogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DNALogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *DNALogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *DNALogSink) GetSinkData() DNALogSinkSinkData {
	if o == nil {
		return DNALogSinkSinkData{}
	}
	return o.SinkData
}

func (o *DNALogSink) GetSinkType() DNALogSinkSinkType {
	if o == nil {
		return DNALogSinkSinkType("")
	}
	return o.SinkType
}

func (o *DNALogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
