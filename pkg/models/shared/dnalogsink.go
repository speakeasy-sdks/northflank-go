// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// DNALogSinkSinkData - Details about the LogDNA log sink.
type DNALogSinkSinkData struct {
	// Ingestion Key
	APIKey string `json:"api_key"`
}

func (o *DNALogSinkSinkData) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

// DNALogSink - Create a log sink using LogDNA
type DNALogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Details about the LogDNA log sink.
	SinkData DNALogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	sinkType string `const:"logdna" json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (d DNALogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DNALogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DNALogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DNALogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *DNALogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DNALogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *DNALogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *DNALogSink) GetSinkData() DNALogSinkSinkData {
	if o == nil {
		return DNALogSinkSinkData{}
	}
	return o.SinkData
}

func (o *DNALogSink) GetSinkType() string {
	return "logdna"
}

func (o *DNALogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
