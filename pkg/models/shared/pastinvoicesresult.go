// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// PastInvoicesResultDataInvoicesPeriod - Information about the billing period of the invoice.
type PastInvoicesResultDataInvoicesPeriod struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Unix timestamp of the end of the billing period.
	End float32 `json:"end"`
	// Unix timestamp of the start of the billing period.
	Start float32 `json:"start"`
}

func (p PastInvoicesResultDataInvoicesPeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PastInvoicesResultDataInvoicesPeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PastInvoicesResultDataInvoicesPeriod) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *PastInvoicesResultDataInvoicesPeriod) GetEnd() float32 {
	if o == nil {
		return 0.0
	}
	return o.End
}

func (o *PastInvoicesResultDataInvoicesPeriod) GetStart() float32 {
	if o == nil {
		return 0.0
	}
	return o.Start
}

type PastInvoicesResultDataInvoices struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Currency code for the currency the invoice is billed in.
	Currency string `json:"currency"`
	// If `timestamp` is passed in, whether the invoice has been paid.
	Paid *bool `json:"paid,omitempty"`
	// Information about the billing period of the invoice.
	Period PastInvoicesResultDataInvoicesPeriod `json:"period"`
	// Total cost of the invoice, in cents, excluding tax.
	SubTotal float32 `json:"subTotal"`
	// Total cost of the invoice, in cents, including tax.
	Total float32 `json:"total"`
}

func (p PastInvoicesResultDataInvoices) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PastInvoicesResultDataInvoices) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PastInvoicesResultDataInvoices) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *PastInvoicesResultDataInvoices) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PastInvoicesResultDataInvoices) GetPaid() *bool {
	if o == nil {
		return nil
	}
	return o.Paid
}

func (o *PastInvoicesResultDataInvoices) GetPeriod() PastInvoicesResultDataInvoicesPeriod {
	if o == nil {
		return PastInvoicesResultDataInvoicesPeriod{}
	}
	return o.Period
}

func (o *PastInvoicesResultDataInvoices) GetSubTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.SubTotal
}

func (o *PastInvoicesResultDataInvoices) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// PastInvoicesResultData - Result data.
type PastInvoicesResultData struct {
	AdditionalProperties map[string]interface{}          `additionalProperties:"true" json:"-"`
	Invoices             *PastInvoicesResultDataInvoices `json:"invoices,omitempty"`
}

func (p PastInvoicesResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PastInvoicesResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PastInvoicesResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *PastInvoicesResultData) GetInvoices() *PastInvoicesResultDataInvoices {
	if o == nil {
		return nil
	}
	return o.Invoices
}

// PastInvoicesResultPagination - Data about the endpoint pagination.
type PastInvoicesResultPagination struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The number of results returned by this request.
	Count float32 `json:"count"`
	// The cursor to access the next page of results.
	Cursor *string `json:"cursor,omitempty"`
	// Is there another page of results available?
	HasNextPage bool `json:"hasNextPage"`
}

func (p PastInvoicesResultPagination) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PastInvoicesResultPagination) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PastInvoicesResultPagination) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *PastInvoicesResultPagination) GetCount() float32 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *PastInvoicesResultPagination) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *PastInvoicesResultPagination) GetHasNextPage() bool {
	if o == nil {
		return false
	}
	return o.HasNextPage
}

// PastInvoicesResult - Response object.
type PastInvoicesResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data PastInvoicesResultData `json:"data"`
	// Data about the endpoint pagination.
	Pagination PastInvoicesResultPagination `json:"pagination"`
}

func (p PastInvoicesResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PastInvoicesResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PastInvoicesResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *PastInvoicesResult) GetData() PastInvoicesResultData {
	if o == nil {
		return PastInvoicesResultData{}
	}
	return o.Data
}

func (o *PastInvoicesResult) GetPagination() PastInvoicesResultPagination {
	if o == nil {
		return PastInvoicesResultPagination{}
	}
	return o.Pagination
}
