// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// CreateClusterRequestGcp - GCP specific data. Required when `provider` is `gcp`.
type CreateClusterRequestGcp struct {
	// ID of the GCP project the cluster will be provisioned in.
	ProjectID string `json:"projectId"`
}

func (o *CreateClusterRequestGcp) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// CreateClusterRequestIntegration - Cloud provider credential input, required fields dependent on which provider is chosen.
type CreateClusterRequestIntegration struct {
	// AWS access key.
	AccessKey *string `json:"accessKey,omitempty"`
	// DO API key.
	APIKey *string `json:"apiKey,omitempty"`
	// Contents of a GCP key file.
	KeyfileJSON *string `json:"keyfileJson,omitempty"`
	// AWS secret key.
	SecretKey *string `json:"secretKey,omitempty"`
}

func (o *CreateClusterRequestIntegration) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *CreateClusterRequestIntegration) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *CreateClusterRequestIntegration) GetKeyfileJSON() *string {
	if o == nil {
		return nil
	}
	return o.KeyfileJSON
}

func (o *CreateClusterRequestIntegration) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

// CreateClusterRequestNodePoolsAutoscaling - Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
type CreateClusterRequestNodePoolsAutoscaling struct {
	Enabled *bool  `json:"enabled,omitempty"`
	Max     *int64 `json:"max,omitempty"`
	Min     *int64 `json:"min,omitempty"`
}

func (o *CreateClusterRequestNodePoolsAutoscaling) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateClusterRequestNodePoolsAutoscaling) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *CreateClusterRequestNodePoolsAutoscaling) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

// CreateClusterRequestNodePoolsLabels - Set of label keys and values that can be used to determine scheduling via resource tags.
type CreateClusterRequestNodePoolsLabels struct {
}

type CreateClusterRequestNodePools struct {
	// Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
	Autoscaling *CreateClusterRequestNodePoolsAutoscaling `json:"autoscaling,omitempty"`
	// Zones in which the node pool should be provisioned.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Disk size in GB
	DiskSize int64 `json:"diskSize"`
	// The disk type to use.
	DiskType *string `json:"diskType,omitempty"`
	// Set of label keys and values that can be used to determine scheduling via resource tags.
	Labels *CreateClusterRequestNodePoolsLabels `json:"labels,omitempty"`
	// Number of nodes to the node pool should be provisioned with.
	NodeCount int64 `json:"nodeCount"`
	// Machine type to be used by the node pool.
	NodeType string `json:"nodeType"`
	// Configures node pool with preemptible / spot instances if enabled.
	Preemptible *bool `json:"preemptible,omitempty"`
	// When 'provider' is 'azure', at least one system node pool is required per cluster.
	SystemPool *bool `json:"systemPool,omitempty"`
}

func (o *CreateClusterRequestNodePools) GetAutoscaling() *CreateClusterRequestNodePoolsAutoscaling {
	if o == nil {
		return nil
	}
	return o.Autoscaling
}

func (o *CreateClusterRequestNodePools) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *CreateClusterRequestNodePools) GetDiskSize() int64 {
	if o == nil {
		return 0
	}
	return o.DiskSize
}

func (o *CreateClusterRequestNodePools) GetDiskType() *string {
	if o == nil {
		return nil
	}
	return o.DiskType
}

func (o *CreateClusterRequestNodePools) GetLabels() *CreateClusterRequestNodePoolsLabels {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateClusterRequestNodePools) GetNodeCount() int64 {
	if o == nil {
		return 0
	}
	return o.NodeCount
}

func (o *CreateClusterRequestNodePools) GetNodeType() string {
	if o == nil {
		return ""
	}
	return o.NodeType
}

func (o *CreateClusterRequestNodePools) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *CreateClusterRequestNodePools) GetSystemPool() *bool {
	if o == nil {
		return nil
	}
	return o.SystemPool
}

// CreateClusterRequestProvider - Cloud provider to be used for the selected resource
type CreateClusterRequestProvider string

const (
	CreateClusterRequestProviderGcp   CreateClusterRequestProvider = "gcp"
	CreateClusterRequestProviderAws   CreateClusterRequestProvider = "aws"
	CreateClusterRequestProviderAzure CreateClusterRequestProvider = "azure"
	CreateClusterRequestProviderDo    CreateClusterRequestProvider = "do"
)

func (e CreateClusterRequestProvider) ToPointer() *CreateClusterRequestProvider {
	return &e
}

func (e *CreateClusterRequestProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcp":
		fallthrough
	case "aws":
		fallthrough
	case "azure":
		fallthrough
	case "do":
		*e = CreateClusterRequestProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestProvider: %v", v)
	}
}

type CreateClusterRequestSettingsBuildsMode string

const (
	CreateClusterRequestSettingsBuildsModePaas         CreateClusterRequestSettingsBuildsMode = "paas"
	CreateClusterRequestSettingsBuildsModeInternal     CreateClusterRequestSettingsBuildsMode = "internal"
	CreateClusterRequestSettingsBuildsModeBuildCluster CreateClusterRequestSettingsBuildsMode = "build-cluster"
)

func (e CreateClusterRequestSettingsBuildsMode) ToPointer() *CreateClusterRequestSettingsBuildsMode {
	return &e
}

func (e *CreateClusterRequestSettingsBuildsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "internal":
		fallthrough
	case "build-cluster":
		*e = CreateClusterRequestSettingsBuildsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestSettingsBuildsMode: %v", v)
	}
}

type CreateClusterRequestSettingsBuilds struct {
	// Cluster to use for scheduling builds
	ClusterID *string                                 `json:"clusterId,omitempty"`
	Mode      *CreateClusterRequestSettingsBuildsMode `json:"mode,omitempty"`
	// Plan to use for builds if they are run on the cluster
	Plan *string `json:"plan,omitempty"`
}

func (o *CreateClusterRequestSettingsBuilds) GetClusterID() *string {
	if o == nil {
		return nil
	}
	return o.ClusterID
}

func (o *CreateClusterRequestSettingsBuilds) GetMode() *CreateClusterRequestSettingsBuildsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *CreateClusterRequestSettingsBuilds) GetPlan() *string {
	if o == nil {
		return nil
	}
	return o.Plan
}

type CreateClusterRequestSettingsLoggingLoki2 struct {
}

type CreateClusterRequestSettingsLoggingLoki1 struct {
	S3AccessKey  string `json:"s3AccessKey"`
	S3BucketName string `json:"s3BucketName"`
	S3Region     string `json:"s3Region"`
	S3SecretKey  string `json:"s3SecretKey"`
}

func (o *CreateClusterRequestSettingsLoggingLoki1) GetS3AccessKey() string {
	if o == nil {
		return ""
	}
	return o.S3AccessKey
}

func (o *CreateClusterRequestSettingsLoggingLoki1) GetS3BucketName() string {
	if o == nil {
		return ""
	}
	return o.S3BucketName
}

func (o *CreateClusterRequestSettingsLoggingLoki1) GetS3Region() string {
	if o == nil {
		return ""
	}
	return o.S3Region
}

func (o *CreateClusterRequestSettingsLoggingLoki1) GetS3SecretKey() string {
	if o == nil {
		return ""
	}
	return o.S3SecretKey
}

type CreateClusterRequestSettingsLoggingLokiType string

const (
	CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki1 CreateClusterRequestSettingsLoggingLokiType = "CreateClusterRequest_settings_logging_loki_1"
	CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki2 CreateClusterRequestSettingsLoggingLokiType = "CreateClusterRequest_settings_logging_loki_2"
)

type CreateClusterRequestSettingsLoggingLoki struct {
	CreateClusterRequestSettingsLoggingLoki1 *CreateClusterRequestSettingsLoggingLoki1
	CreateClusterRequestSettingsLoggingLoki2 *CreateClusterRequestSettingsLoggingLoki2

	Type CreateClusterRequestSettingsLoggingLokiType
}

func CreateCreateClusterRequestSettingsLoggingLokiCreateClusterRequestSettingsLoggingLoki1(createClusterRequestSettingsLoggingLoki1 CreateClusterRequestSettingsLoggingLoki1) CreateClusterRequestSettingsLoggingLoki {
	typ := CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki1

	return CreateClusterRequestSettingsLoggingLoki{
		CreateClusterRequestSettingsLoggingLoki1: &createClusterRequestSettingsLoggingLoki1,
		Type:                                     typ,
	}
}

func CreateCreateClusterRequestSettingsLoggingLokiCreateClusterRequestSettingsLoggingLoki2(createClusterRequestSettingsLoggingLoki2 CreateClusterRequestSettingsLoggingLoki2) CreateClusterRequestSettingsLoggingLoki {
	typ := CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki2

	return CreateClusterRequestSettingsLoggingLoki{
		CreateClusterRequestSettingsLoggingLoki2: &createClusterRequestSettingsLoggingLoki2,
		Type:                                     typ,
	}
}

func (u *CreateClusterRequestSettingsLoggingLoki) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createClusterRequestSettingsLoggingLoki1 := new(CreateClusterRequestSettingsLoggingLoki1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createClusterRequestSettingsLoggingLoki1); err == nil {
		u.CreateClusterRequestSettingsLoggingLoki1 = createClusterRequestSettingsLoggingLoki1
		u.Type = CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki1
		return nil
	}

	createClusterRequestSettingsLoggingLoki2 := new(CreateClusterRequestSettingsLoggingLoki2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createClusterRequestSettingsLoggingLoki2); err == nil {
		u.CreateClusterRequestSettingsLoggingLoki2 = createClusterRequestSettingsLoggingLoki2
		u.Type = CreateClusterRequestSettingsLoggingLokiTypeCreateClusterRequestSettingsLoggingLoki2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateClusterRequestSettingsLoggingLoki) MarshalJSON() ([]byte, error) {
	if u.CreateClusterRequestSettingsLoggingLoki1 != nil {
		return json.Marshal(u.CreateClusterRequestSettingsLoggingLoki1)
	}

	if u.CreateClusterRequestSettingsLoggingLoki2 != nil {
		return json.Marshal(u.CreateClusterRequestSettingsLoggingLoki2)
	}

	return nil, nil
}

type CreateClusterRequestSettingsLoggingMode string

const (
	CreateClusterRequestSettingsLoggingModePaas CreateClusterRequestSettingsLoggingMode = "paas"
	CreateClusterRequestSettingsLoggingModeLoki CreateClusterRequestSettingsLoggingMode = "loki"
)

func (e CreateClusterRequestSettingsLoggingMode) ToPointer() *CreateClusterRequestSettingsLoggingMode {
	return &e
}

func (e *CreateClusterRequestSettingsLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "loki":
		*e = CreateClusterRequestSettingsLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestSettingsLoggingMode: %v", v)
	}
}

type CreateClusterRequestSettingsLogging struct {
	Loki *CreateClusterRequestSettingsLoggingLoki `json:"loki,omitempty"`
	Mode *CreateClusterRequestSettingsLoggingMode `json:"mode,omitempty"`
}

func (o *CreateClusterRequestSettingsLogging) GetLoki() *CreateClusterRequestSettingsLoggingLoki {
	if o == nil {
		return nil
	}
	return o.Loki
}

func (o *CreateClusterRequestSettingsLogging) GetMode() *CreateClusterRequestSettingsLoggingMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

type CreateClusterRequestSettingsRegistryMode string

const (
	CreateClusterRequestSettingsRegistryModePaas       CreateClusterRequestSettingsRegistryMode = "paas"
	CreateClusterRequestSettingsRegistryModeSelfHosted CreateClusterRequestSettingsRegistryMode = "self-hosted"
)

func (e CreateClusterRequestSettingsRegistryMode) ToPointer() *CreateClusterRequestSettingsRegistryMode {
	return &e
}

func (e *CreateClusterRequestSettingsRegistryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "self-hosted":
		*e = CreateClusterRequestSettingsRegistryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestSettingsRegistryMode: %v", v)
	}
}

type CreateClusterRequestSettingsRegistry struct {
	Mode *CreateClusterRequestSettingsRegistryMode `json:"mode,omitempty"`
	// Credentials to use for storing of images.
	RegistryID *string `json:"registryId,omitempty"`
}

func (o *CreateClusterRequestSettingsRegistry) GetMode() *CreateClusterRequestSettingsRegistryMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *CreateClusterRequestSettingsRegistry) GetRegistryID() *string {
	if o == nil {
		return nil
	}
	return o.RegistryID
}

type CreateClusterRequestSettings struct {
	Builds   *CreateClusterRequestSettingsBuilds   `json:"builds,omitempty"`
	Logging  *CreateClusterRequestSettingsLogging  `json:"logging,omitempty"`
	Registry *CreateClusterRequestSettingsRegistry `json:"registry,omitempty"`
}

func (o *CreateClusterRequestSettings) GetBuilds() *CreateClusterRequestSettingsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateClusterRequestSettings) GetLogging() *CreateClusterRequestSettingsLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *CreateClusterRequestSettings) GetRegistry() *CreateClusterRequestSettingsRegistry {
	if o == nil {
		return nil
	}
	return o.Registry
}

// CreateClusterRequest - Request body
type CreateClusterRequest struct {
	// The description of the cluster.
	Description *string `json:"description,omitempty"`
	// GCP specific data. Required when `provider` is `gcp`.
	Gcp *CreateClusterRequestGcp `json:"gcp,omitempty"`
	// Cloud provider credential input, required fields dependent on which provider is chosen.
	Integration *CreateClusterRequestIntegration `json:"integration,omitempty"`
	// Existing integration to use for this cluster.
	IntegrationID *string `json:"integrationId,omitempty"`
	// Kubernetes version of the cluster.
	KubernetesVersion string `json:"kubernetesVersion"`
	// The name of the cluster.
	Name string `json:"name"`
	// An array of node pools.
	NodePools []CreateClusterRequestNodePools `json:"nodePools"`
	// Cloud provider to be used for the selected resource
	Provider CreateClusterRequestProvider `json:"provider"`
	// Region of the cluster.
	Region   string                       `json:"region"`
	Settings CreateClusterRequestSettings `json:"settings"`
}

func (o *CreateClusterRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateClusterRequest) GetGcp() *CreateClusterRequestGcp {
	if o == nil {
		return nil
	}
	return o.Gcp
}

func (o *CreateClusterRequest) GetIntegration() *CreateClusterRequestIntegration {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateClusterRequest) GetIntegrationID() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationID
}

func (o *CreateClusterRequest) GetKubernetesVersion() string {
	if o == nil {
		return ""
	}
	return o.KubernetesVersion
}

func (o *CreateClusterRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateClusterRequest) GetNodePools() []CreateClusterRequestNodePools {
	if o == nil {
		return []CreateClusterRequestNodePools{}
	}
	return o.NodePools
}

func (o *CreateClusterRequest) GetProvider() CreateClusterRequestProvider {
	if o == nil {
		return CreateClusterRequestProvider("")
	}
	return o.Provider
}

func (o *CreateClusterRequest) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *CreateClusterRequest) GetSettings() CreateClusterRequestSettings {
	if o == nil {
		return CreateClusterRequestSettings{}
	}
	return o.Settings
}
