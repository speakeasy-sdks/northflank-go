// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v3/pkg/utils"
)

// Gcp - GCP specific data. Required when `provider` is `gcp`.
type Gcp struct {
	// ID of the GCP project the cluster will be provisioned in.
	ProjectID string `json:"projectId"`
}

func (o *Gcp) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// Integration - Cloud provider credential input, required fields dependent on which provider is chosen.
type Integration struct {
	// AWS access key.
	AccessKey *string `json:"accessKey,omitempty"`
	// DO API key.
	APIKey *string `json:"apiKey,omitempty"`
	// Contents of a GCP key file.
	KeyfileJSON *string `json:"keyfileJson,omitempty"`
	// AWS secret key.
	SecretKey *string `json:"secretKey,omitempty"`
}

func (o *Integration) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *Integration) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *Integration) GetKeyfileJSON() *string {
	if o == nil {
		return nil
	}
	return o.KeyfileJSON
}

func (o *Integration) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

// Autoscaling - Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
type Autoscaling struct {
	Enabled *bool  `default:"false" json:"enabled"`
	Max     *int64 `json:"max,omitempty"`
	Min     *int64 `json:"min,omitempty"`
}

func (a Autoscaling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Autoscaling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Autoscaling) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Autoscaling) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *Autoscaling) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

// Labels - Set of label keys and values that can be used to determine scheduling via resource tags.
type Labels struct {
}

type NodePools struct {
	// Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
	Autoscaling *Autoscaling `json:"autoscaling,omitempty"`
	// Zones in which the node pool should be provisioned.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Disk size in GB
	DiskSize int64 `json:"diskSize"`
	// The disk type to use.
	DiskType *string `json:"diskType,omitempty"`
	// Set of label keys and values that can be used to determine scheduling via resource tags.
	Labels *Labels `json:"labels,omitempty"`
	// Number of nodes to the node pool should be provisioned with.
	NodeCount int64 `json:"nodeCount"`
	// Machine type to be used by the node pool.
	NodeType string `json:"nodeType"`
	// Configures node pool with preemptible / spot instances if enabled.
	Preemptible *bool `default:"false" json:"preemptible"`
	// When 'provider' is 'azure', at least one system node pool is required per cluster.
	SystemPool *bool `json:"systemPool,omitempty"`
}

func (n NodePools) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NodePools) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NodePools) GetAutoscaling() *Autoscaling {
	if o == nil {
		return nil
	}
	return o.Autoscaling
}

func (o *NodePools) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *NodePools) GetDiskSize() int64 {
	if o == nil {
		return 0
	}
	return o.DiskSize
}

func (o *NodePools) GetDiskType() *string {
	if o == nil {
		return nil
	}
	return o.DiskType
}

func (o *NodePools) GetLabels() *Labels {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *NodePools) GetNodeCount() int64 {
	if o == nil {
		return 0
	}
	return o.NodeCount
}

func (o *NodePools) GetNodeType() string {
	if o == nil {
		return ""
	}
	return o.NodeType
}

func (o *NodePools) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *NodePools) GetSystemPool() *bool {
	if o == nil {
		return nil
	}
	return o.SystemPool
}

// CreateClusterRequestProvider - Cloud provider to be used for the selected resource
type CreateClusterRequestProvider string

const (
	CreateClusterRequestProviderGcp   CreateClusterRequestProvider = "gcp"
	CreateClusterRequestProviderAws   CreateClusterRequestProvider = "aws"
	CreateClusterRequestProviderAzure CreateClusterRequestProvider = "azure"
	CreateClusterRequestProviderDo    CreateClusterRequestProvider = "do"
)

func (e CreateClusterRequestProvider) ToPointer() *CreateClusterRequestProvider {
	return &e
}

func (e *CreateClusterRequestProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcp":
		fallthrough
	case "aws":
		fallthrough
	case "azure":
		fallthrough
	case "do":
		*e = CreateClusterRequestProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestProvider: %v", v)
	}
}

type Mode string

const (
	ModePaas         Mode = "paas"
	ModeInternal     Mode = "internal"
	ModeBuildCluster Mode = "build-cluster"
)

func (e Mode) ToPointer() *Mode {
	return &e
}

func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "internal":
		fallthrough
	case "build-cluster":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type Builds struct {
	// Cluster to use for scheduling builds
	ClusterID *string `json:"clusterId,omitempty"`
	Mode      *Mode   `json:"mode,omitempty"`
	// Plan to use for builds if they are run on the cluster
	Plan *string `json:"plan,omitempty"`
}

func (o *Builds) GetClusterID() *string {
	if o == nil {
		return nil
	}
	return o.ClusterID
}

func (o *Builds) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *Builds) GetPlan() *string {
	if o == nil {
		return nil
	}
	return o.Plan
}

type CreateClusterRequest2 struct {
}

type CreateClusterRequest1 struct {
	S3AccessKey  string `json:"s3AccessKey"`
	S3BucketName string `json:"s3BucketName"`
	S3Region     string `json:"s3Region"`
	S3SecretKey  string `json:"s3SecretKey"`
}

func (o *CreateClusterRequest1) GetS3AccessKey() string {
	if o == nil {
		return ""
	}
	return o.S3AccessKey
}

func (o *CreateClusterRequest1) GetS3BucketName() string {
	if o == nil {
		return ""
	}
	return o.S3BucketName
}

func (o *CreateClusterRequest1) GetS3Region() string {
	if o == nil {
		return ""
	}
	return o.S3Region
}

func (o *CreateClusterRequest1) GetS3SecretKey() string {
	if o == nil {
		return ""
	}
	return o.S3SecretKey
}

type LokiType string

const (
	LokiTypeCreateClusterRequest1 LokiType = "CreateClusterRequest_1"
	LokiTypeCreateClusterRequest2 LokiType = "CreateClusterRequest_2"
)

type Loki struct {
	CreateClusterRequest1 *CreateClusterRequest1
	CreateClusterRequest2 *CreateClusterRequest2

	Type LokiType
}

func CreateLokiCreateClusterRequest1(createClusterRequest1 CreateClusterRequest1) Loki {
	typ := LokiTypeCreateClusterRequest1

	return Loki{
		CreateClusterRequest1: &createClusterRequest1,
		Type:                  typ,
	}
}

func CreateLokiCreateClusterRequest2(createClusterRequest2 CreateClusterRequest2) Loki {
	typ := LokiTypeCreateClusterRequest2

	return Loki{
		CreateClusterRequest2: &createClusterRequest2,
		Type:                  typ,
	}
}

func (u *Loki) UnmarshalJSON(data []byte) error {

	createClusterRequest2 := CreateClusterRequest2{}
	if err := utils.UnmarshalJSON(data, &createClusterRequest2, "", true, true); err == nil {
		u.CreateClusterRequest2 = &createClusterRequest2
		u.Type = LokiTypeCreateClusterRequest2
		return nil
	}

	createClusterRequest1 := CreateClusterRequest1{}
	if err := utils.UnmarshalJSON(data, &createClusterRequest1, "", true, true); err == nil {
		u.CreateClusterRequest1 = &createClusterRequest1
		u.Type = LokiTypeCreateClusterRequest1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Loki) MarshalJSON() ([]byte, error) {
	if u.CreateClusterRequest1 != nil {
		return utils.MarshalJSON(u.CreateClusterRequest1, "", true)
	}

	if u.CreateClusterRequest2 != nil {
		return utils.MarshalJSON(u.CreateClusterRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateClusterRequestMode string

const (
	CreateClusterRequestModePaas CreateClusterRequestMode = "paas"
	CreateClusterRequestModeLoki CreateClusterRequestMode = "loki"
)

func (e CreateClusterRequestMode) ToPointer() *CreateClusterRequestMode {
	return &e
}

func (e *CreateClusterRequestMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "loki":
		*e = CreateClusterRequestMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestMode: %v", v)
	}
}

type Logging struct {
	Loki *Loki                     `json:"loki,omitempty"`
	Mode *CreateClusterRequestMode `json:"mode,omitempty"`
}

func (o *Logging) GetLoki() *Loki {
	if o == nil {
		return nil
	}
	return o.Loki
}

func (o *Logging) GetMode() *CreateClusterRequestMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

type CreateClusterRequestSchemasMode string

const (
	CreateClusterRequestSchemasModePaas       CreateClusterRequestSchemasMode = "paas"
	CreateClusterRequestSchemasModeSelfHosted CreateClusterRequestSchemasMode = "self-hosted"
)

func (e CreateClusterRequestSchemasMode) ToPointer() *CreateClusterRequestSchemasMode {
	return &e
}

func (e *CreateClusterRequestSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paas":
		fallthrough
	case "self-hosted":
		*e = CreateClusterRequestSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateClusterRequestSchemasMode: %v", v)
	}
}

type Registry struct {
	Mode *CreateClusterRequestSchemasMode `json:"mode,omitempty"`
	// Credentials to use for storing of images.
	RegistryID *string `json:"registryId,omitempty"`
}

func (o *Registry) GetMode() *CreateClusterRequestSchemasMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *Registry) GetRegistryID() *string {
	if o == nil {
		return nil
	}
	return o.RegistryID
}

type Settings struct {
	Builds   *Builds   `json:"builds,omitempty"`
	Logging  *Logging  `json:"logging,omitempty"`
	Registry *Registry `json:"registry,omitempty"`
}

func (o *Settings) GetBuilds() *Builds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *Settings) GetLogging() *Logging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *Settings) GetRegistry() *Registry {
	if o == nil {
		return nil
	}
	return o.Registry
}

type CreateClusterRequest struct {
	// The description of the cluster.
	Description *string `json:"description,omitempty"`
	// GCP specific data. Required when `provider` is `gcp`.
	Gcp *Gcp `json:"gcp,omitempty"`
	// Cloud provider credential input, required fields dependent on which provider is chosen.
	Integration *Integration `json:"integration,omitempty"`
	// Existing integration to use for this cluster.
	IntegrationID *string `json:"integrationId,omitempty"`
	// Kubernetes version of the cluster.
	KubernetesVersion string `json:"kubernetesVersion"`
	// The name of the cluster.
	Name string `json:"name"`
	// An array of node pools.
	NodePools []NodePools `json:"nodePools"`
	// Cloud provider to be used for the selected resource
	Provider CreateClusterRequestProvider `json:"provider"`
	// Region of the cluster.
	Region   string   `json:"region"`
	Settings Settings `json:"settings"`
}

func (o *CreateClusterRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateClusterRequest) GetGcp() *Gcp {
	if o == nil {
		return nil
	}
	return o.Gcp
}

func (o *CreateClusterRequest) GetIntegration() *Integration {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateClusterRequest) GetIntegrationID() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationID
}

func (o *CreateClusterRequest) GetKubernetesVersion() string {
	if o == nil {
		return ""
	}
	return o.KubernetesVersion
}

func (o *CreateClusterRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateClusterRequest) GetNodePools() []NodePools {
	if o == nil {
		return []NodePools{}
	}
	return o.NodePools
}

func (o *CreateClusterRequest) GetProvider() CreateClusterRequestProvider {
	if o == nil {
		return CreateClusterRequestProvider("")
	}
	return o.Provider
}

func (o *CreateClusterRequest) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *CreateClusterRequest) GetSettings() Settings {
	if o == nil {
		return Settings{}
	}
	return o.Settings
}
