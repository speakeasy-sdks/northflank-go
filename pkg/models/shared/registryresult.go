// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// RegistryResultDataProvider - The registry provider associated with this set of credentials.
type RegistryResultDataProvider string

const (
	RegistryResultDataProviderDockerhub RegistryResultDataProvider = "dockerhub"
	RegistryResultDataProviderGcr       RegistryResultDataProvider = "gcr"
	RegistryResultDataProviderGcrEu     RegistryResultDataProvider = "gcr-eu"
	RegistryResultDataProviderGcrUs     RegistryResultDataProvider = "gcr-us"
	RegistryResultDataProviderGitlab    RegistryResultDataProvider = "gitlab"
	RegistryResultDataProviderGithub    RegistryResultDataProvider = "github"
	RegistryResultDataProviderCustom    RegistryResultDataProvider = "custom"
)

func (e RegistryResultDataProvider) ToPointer() *RegistryResultDataProvider {
	return &e
}

func (e *RegistryResultDataProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dockerhub":
		fallthrough
	case "gcr":
		fallthrough
	case "gcr-eu":
		fallthrough
	case "gcr-us":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "custom":
		*e = RegistryResultDataProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistryResultDataProvider: %v", v)
	}
}

// RegistryResultDataRestrictions - Data about whether the credentials are restricted to certain projects.
type RegistryResultDataRestrictions struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// An array of projects the credentials are restricted to, if applicable.
	Projects []string `json:"projects"`
	// Whether the credentials are restricted to specific projects.
	Restricted bool `json:"restricted"`
}

func (r RegistryResultDataRestrictions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistryResultDataRestrictions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistryResultDataRestrictions) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistryResultDataRestrictions) GetProjects() []string {
	if o == nil {
		return []string{}
	}
	return o.Projects
}

func (o *RegistryResultDataRestrictions) GetRestricted() bool {
	if o == nil {
		return false
	}
	return o.Restricted
}

// RegistryResultData - Result data.
type RegistryResultData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The `auths` data extracted from your Docker config file.
	Auths map[string]interface{} `json:"auths,omitempty"`
	// Description of the saved credentials.
	Description string `json:"description"`
	// Identifier for the credentials.
	ID string `json:"id"`
	// Name of the saved credentials.
	Name string `json:"name"`
	// The registry provider associated with this set of credentials.
	Provider RegistryResultDataProvider `json:"provider"`
	// Data about whether the credentials are restricted to certain projects.
	Restrictions RegistryResultDataRestrictions `json:"restrictions"`
}

func (r RegistryResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistryResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistryResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistryResultData) GetAuths() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Auths
}

func (o *RegistryResultData) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *RegistryResultData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RegistryResultData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RegistryResultData) GetProvider() RegistryResultDataProvider {
	if o == nil {
		return RegistryResultDataProvider("")
	}
	return o.Provider
}

func (o *RegistryResultData) GetRestrictions() RegistryResultDataRestrictions {
	if o == nil {
		return RegistryResultDataRestrictions{}
	}
	return o.Restrictions
}

// RegistryResult - Response object.
type RegistryResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data RegistryResultData `json:"data"`
}

func (r RegistryResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RegistryResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RegistryResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RegistryResult) GetData() RegistryResultData {
	if o == nil {
		return RegistryResultData{}
	}
	return o.Data
}
