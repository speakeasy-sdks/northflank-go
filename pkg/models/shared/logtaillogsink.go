// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// LogtailLogSinkSinkData - Details about the Logtail log sink.
type LogtailLogSinkSinkData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Logtail Source Token
	Token string `json:"token"`
}

func (l LogtailLogSinkSinkData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogtailLogSinkSinkData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LogtailLogSinkSinkData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *LogtailLogSinkSinkData) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

// LogtailLogSinkSinkType - The type of the log sink.
type LogtailLogSinkSinkType string

const (
	LogtailLogSinkSinkTypeLogtail LogtailLogSinkSinkType = "logtail"
)

func (e LogtailLogSinkSinkType) ToPointer() *LogtailLogSinkSinkType {
	return &e
}

func (e *LogtailLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "logtail":
		*e = LogtailLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogtailLogSinkSinkType: %v", v)
	}
}

// LogtailLogSink - Create a log sink using Logtail
type LogtailLogSink struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Details about the Logtail log sink.
	SinkData LogtailLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType LogtailLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (l LogtailLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogtailLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *LogtailLogSink) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *LogtailLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LogtailLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *LogtailLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LogtailLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *LogtailLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *LogtailLogSink) GetSinkData() LogtailLogSinkSinkData {
	if o == nil {
		return LogtailLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *LogtailLogSink) GetSinkType() LogtailLogSinkSinkType {
	if o == nil {
		return LogtailLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *LogtailLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
