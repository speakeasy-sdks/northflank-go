// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/northflank-go/v3/pkg/utils"
	"time"
)

// ClusterDetailsResultAutoscaling - Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
type ClusterDetailsResultAutoscaling struct {
	Enabled *bool  `default:"false" json:"enabled"`
	Max     *int64 `json:"max,omitempty"`
	Min     *int64 `json:"min,omitempty"`
}

func (c ClusterDetailsResultAutoscaling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterDetailsResultAutoscaling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClusterDetailsResultAutoscaling) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ClusterDetailsResultAutoscaling) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *ClusterDetailsResultAutoscaling) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

// ClusterDetailsResultLabels - Set of label keys and values that can be used to determine scheduling via resource tags.
type ClusterDetailsResultLabels struct {
}

type ClusterDetailsResultNodePools struct {
	// Auto scaling settings to use for the node pool. Requires that the cloud provider supports this feature.
	Autoscaling *ClusterDetailsResultAutoscaling `json:"autoscaling,omitempty"`
	// Zones in which the node pool should be provisioned.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Disk size in GB
	DiskSize int64 `json:"diskSize"`
	// The disk type to use.
	DiskType *string `json:"diskType,omitempty"`
	// ID of existing node pool. Must be passed when modifying existing node pools. Not relevant for new node pools
	ID *string `json:"id,omitempty"`
	// Set of label keys and values that can be used to determine scheduling via resource tags.
	Labels *ClusterDetailsResultLabels `json:"labels,omitempty"`
	// Number of nodes to the node pool should be provisioned with.
	NodeCount int64 `json:"nodeCount"`
	// Machine type to be used by the node pool.
	NodeType string `json:"nodeType"`
	// Configures node pool with preemptible / spot instances if enabled.
	Preemptible *bool `default:"false" json:"preemptible"`
	// When 'provider' is 'azure', at least one system node pool is required per cluster.
	SystemPool *bool `json:"systemPool,omitempty"`
}

func (c ClusterDetailsResultNodePools) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterDetailsResultNodePools) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClusterDetailsResultNodePools) GetAutoscaling() *ClusterDetailsResultAutoscaling {
	if o == nil {
		return nil
	}
	return o.Autoscaling
}

func (o *ClusterDetailsResultNodePools) GetAvailabilityZones() []string {
	if o == nil {
		return nil
	}
	return o.AvailabilityZones
}

func (o *ClusterDetailsResultNodePools) GetDiskSize() int64 {
	if o == nil {
		return 0
	}
	return o.DiskSize
}

func (o *ClusterDetailsResultNodePools) GetDiskType() *string {
	if o == nil {
		return nil
	}
	return o.DiskType
}

func (o *ClusterDetailsResultNodePools) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ClusterDetailsResultNodePools) GetLabels() *ClusterDetailsResultLabels {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *ClusterDetailsResultNodePools) GetNodeCount() int64 {
	if o == nil {
		return 0
	}
	return o.NodeCount
}

func (o *ClusterDetailsResultNodePools) GetNodeType() string {
	if o == nil {
		return ""
	}
	return o.NodeType
}

func (o *ClusterDetailsResultNodePools) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *ClusterDetailsResultNodePools) GetSystemPool() *bool {
	if o == nil {
		return nil
	}
	return o.SystemPool
}

type State struct {
	State          *string    `json:"state,omitempty"`
	TransitionTime *time.Time `json:"transitionTime,omitempty"`
}

func (s State) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *State) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *State) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *State) GetTransitionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransitionTime
}

type Status struct {
	NextUpdateAfter *time.Time `json:"nextUpdateAfter,omitempty"`
	State           *State     `json:"state,omitempty"`
}

func (s Status) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Status) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Status) GetNextUpdateAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextUpdateAfter
}

func (o *Status) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

// ClusterDetailsResultData - Result data.
type ClusterDetailsResultData struct {
	// The time the cluster was created.
	CreatedAt time.Time `json:"createdAt"`
	// Indicates if provider resource deletion has been requested by the user.
	DeletionRequested bool `json:"deletionRequested"`
	// A short description of the cluster.
	Description *string `json:"description,omitempty"`
	// Identifier for the cluster.
	ID string `json:"id"`
	// ID of the provider integration used by this cluster.
	IntegrationID string `json:"integrationId"`
	// The name of the cluster.
	Name      string                        `json:"name"`
	NodePools ClusterDetailsResultNodePools `json:"nodePools"`
	// The cloud provider to which this cluster belongs to.
	Provider *string `json:"provider,omitempty"`
	Status   *Status `json:"status,omitempty"`
}

func (c ClusterDetailsResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterDetailsResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClusterDetailsResultData) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ClusterDetailsResultData) GetDeletionRequested() bool {
	if o == nil {
		return false
	}
	return o.DeletionRequested
}

func (o *ClusterDetailsResultData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ClusterDetailsResultData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClusterDetailsResultData) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *ClusterDetailsResultData) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ClusterDetailsResultData) GetNodePools() ClusterDetailsResultNodePools {
	if o == nil {
		return ClusterDetailsResultNodePools{}
	}
	return o.NodePools
}

func (o *ClusterDetailsResultData) GetProvider() *string {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *ClusterDetailsResultData) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

// ClusterDetailsResult - Response object.
type ClusterDetailsResult struct {
	// Result data.
	Data ClusterDetailsResultData `json:"data"`
}

func (o *ClusterDetailsResult) GetData() ClusterDetailsResultData {
	if o == nil {
		return ClusterDetailsResultData{}
	}
	return o.Data
}
