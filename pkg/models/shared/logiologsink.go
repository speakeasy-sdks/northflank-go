// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v3/pkg/utils"
)

// LogioLogSinkRegion - Your Logzio region code
type LogioLogSinkRegion string

const (
	LogioLogSinkRegionEu LogioLogSinkRegion = "eu"
	LogioLogSinkRegionUk LogioLogSinkRegion = "uk"
	LogioLogSinkRegionUs LogioLogSinkRegion = "us"
	LogioLogSinkRegionCa LogioLogSinkRegion = "ca"
	LogioLogSinkRegionAu LogioLogSinkRegion = "au"
	LogioLogSinkRegionNl LogioLogSinkRegion = "nl"
	LogioLogSinkRegionWa LogioLogSinkRegion = "wa"
)

func (e LogioLogSinkRegion) ToPointer() *LogioLogSinkRegion {
	return &e
}

func (e *LogioLogSinkRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "eu":
		fallthrough
	case "uk":
		fallthrough
	case "us":
		fallthrough
	case "ca":
		fallthrough
	case "au":
		fallthrough
	case "nl":
		fallthrough
	case "wa":
		*e = LogioLogSinkRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogioLogSinkRegion: %v", v)
	}
}

// LogioLogSinkSinkData - Details about the Logz.io log sink.
type LogioLogSinkSinkData struct {
	// Your Logzio region code
	Region LogioLogSinkRegion `json:"region"`
	// The Log Shipping Token of the account you want to ship to
	Token string `json:"token"`
}

func (o *LogioLogSinkSinkData) GetRegion() LogioLogSinkRegion {
	if o == nil {
		return LogioLogSinkRegion("")
	}
	return o.Region
}

func (o *LogioLogSinkSinkData) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

// LogioLogSinkSinkType - The type of the log sink.
type LogioLogSinkSinkType string

const (
	LogioLogSinkSinkTypeLogzio LogioLogSinkSinkType = "logzio"
)

func (e LogioLogSinkSinkType) ToPointer() *LogioLogSinkSinkType {
	return &e
}

func (e *LogioLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "logzio":
		*e = LogioLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogioLogSinkSinkType: %v", v)
	}
}

// LogioLogSink - Create a log sink using Logz.io
type LogioLogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Details about the Logz.io log sink.
	SinkData LogioLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType LogioLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (l LogioLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LogioLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *LogioLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LogioLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *LogioLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LogioLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *LogioLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *LogioLogSink) GetSinkData() LogioLogSinkSinkData {
	if o == nil {
		return LogioLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *LogioLogSink) GetSinkType() LogioLogSinkSinkType {
	if o == nil {
		return LogioLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *LogioLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
