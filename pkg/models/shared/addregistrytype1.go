// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v2/pkg/utils"
)

// Provider - The registry provider associated with this set of credentials.
type Provider string

const (
	ProviderDockerhub Provider = "dockerhub"
	ProviderGcr       Provider = "gcr"
	ProviderGcrEu     Provider = "gcr-eu"
	ProviderGcrUs     Provider = "gcr-us"
	ProviderGitlab    Provider = "gitlab"
	ProviderGithub    Provider = "github"
	ProviderCustom    Provider = "custom"
)

func (e Provider) ToPointer() *Provider {
	return &e
}

func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dockerhub":
		fallthrough
	case "gcr":
		fallthrough
	case "gcr-eu":
		fallthrough
	case "gcr-us":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "custom":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

// Restrictions - Data about whether the credentials are restricted to certain projects.
type Restrictions struct {
	// An array of projects the credentials are restricted to, if applicable.
	Projects []string `json:"projects,omitempty"`
	// Whether the credentials are restricted to specific projects.
	Restricted *bool `default:"false" json:"restricted"`
}

func (r Restrictions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Restrictions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Restrictions) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *Restrictions) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

type AddRegistryType1 struct {
	// Description of the credentials.
	Description string `json:"description"`
	// Name of the credentials.
	Name string `json:"name"`
	// Password, Personal Access Token, or API key for the container registry.
	Password string `json:"password"`
	// The registry provider associated with this set of credentials.
	Provider Provider `json:"provider"`
	// Custom url for the container registry. Only usable (and required) when `provider` is `custom`.
	RegistryURL *string `json:"registryUrl,omitempty"`
	// Data about whether the credentials are restricted to certain projects.
	Restrictions *Restrictions `json:"restrictions,omitempty"`
	// Username for the container registry.
	Username string `json:"username"`
}

func (o *AddRegistryType1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *AddRegistryType1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AddRegistryType1) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *AddRegistryType1) GetProvider() Provider {
	if o == nil {
		return Provider("")
	}
	return o.Provider
}

func (o *AddRegistryType1) GetRegistryURL() *string {
	if o == nil {
		return nil
	}
	return o.RegistryURL
}

func (o *AddRegistryType1) GetRestrictions() *Restrictions {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *AddRegistryType1) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
