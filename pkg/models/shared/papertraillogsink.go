// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/v2/pkg/utils"
)

// PapertrailLogSinkAuthenticationStrategy - The authentication strategy.
type PapertrailLogSinkAuthenticationStrategy string

const (
	PapertrailLogSinkAuthenticationStrategyToken PapertrailLogSinkAuthenticationStrategy = "token"
)

func (e PapertrailLogSinkAuthenticationStrategy) ToPointer() *PapertrailLogSinkAuthenticationStrategy {
	return &e
}

func (e *PapertrailLogSinkAuthenticationStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = PapertrailLogSinkAuthenticationStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PapertrailLogSinkAuthenticationStrategy: %v", v)
	}
}

// PapertrailLogSink2 - Authenticate with a token.
type PapertrailLogSink2 struct {
	// The authentication strategy.
	AuthenticationStrategy PapertrailLogSinkAuthenticationStrategy `json:"authenticationStrategy"`
	// The HTTP Token for the Papertrail log destination.
	Token string `json:"token"`
	// The uri for the Papertrail log destination.
	URI string `json:"uri"`
}

func (o *PapertrailLogSink2) GetAuthenticationStrategy() PapertrailLogSinkAuthenticationStrategy {
	if o == nil {
		return PapertrailLogSinkAuthenticationStrategy("")
	}
	return o.AuthenticationStrategy
}

func (o *PapertrailLogSink2) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *PapertrailLogSink2) GetURI() string {
	if o == nil {
		return ""
	}
	return o.URI
}

// AuthenticationStrategy - The authentication strategy.
type AuthenticationStrategy string

const (
	AuthenticationStrategyPort AuthenticationStrategy = "port"
)

func (e AuthenticationStrategy) ToPointer() *AuthenticationStrategy {
	return &e
}

func (e *AuthenticationStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "port":
		*e = AuthenticationStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStrategy: %v", v)
	}
}

// PapertrailLogSink1 - Authenticate with a host/port
type PapertrailLogSink1 struct {
	// The authentication strategy.
	AuthenticationStrategy AuthenticationStrategy `json:"authenticationStrategy"`
	// The host for the Papertrail log destination.
	Host string `json:"host"`
	// The port for the Papertrail log destination.
	Port float32 `json:"port"`
}

func (o *PapertrailLogSink1) GetAuthenticationStrategy() AuthenticationStrategy {
	if o == nil {
		return AuthenticationStrategy("")
	}
	return o.AuthenticationStrategy
}

func (o *PapertrailLogSink1) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *PapertrailLogSink1) GetPort() float32 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

type PapertrailLogSinkSinkDataType string

const (
	PapertrailLogSinkSinkDataTypePapertrailLogSink1 PapertrailLogSinkSinkDataType = "PapertrailLogSink_1"
	PapertrailLogSinkSinkDataTypePapertrailLogSink2 PapertrailLogSinkSinkDataType = "PapertrailLogSink_2"
)

// PapertrailLogSinkSinkData - Papertrail Sink Schema.
type PapertrailLogSinkSinkData struct {
	PapertrailLogSink1 *PapertrailLogSink1
	PapertrailLogSink2 *PapertrailLogSink2

	Type PapertrailLogSinkSinkDataType
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSink1(papertrailLogSink1 PapertrailLogSink1) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSink1

	return PapertrailLogSinkSinkData{
		PapertrailLogSink1: &papertrailLogSink1,
		Type:               typ,
	}
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSink2(papertrailLogSink2 PapertrailLogSink2) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSink2

	return PapertrailLogSinkSinkData{
		PapertrailLogSink2: &papertrailLogSink2,
		Type:               typ,
	}
}

func (u *PapertrailLogSinkSinkData) UnmarshalJSON(data []byte) error {

	papertrailLogSink1 := PapertrailLogSink1{}
	if err := utils.UnmarshalJSON(data, &papertrailLogSink1, "", true, true); err == nil {
		u.PapertrailLogSink1 = &papertrailLogSink1
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSink1
		return nil
	}

	papertrailLogSink2 := PapertrailLogSink2{}
	if err := utils.UnmarshalJSON(data, &papertrailLogSink2, "", true, true); err == nil {
		u.PapertrailLogSink2 = &papertrailLogSink2
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSink2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PapertrailLogSinkSinkData) MarshalJSON() ([]byte, error) {
	if u.PapertrailLogSink1 != nil {
		return utils.MarshalJSON(u.PapertrailLogSink1, "", true)
	}

	if u.PapertrailLogSink2 != nil {
		return utils.MarshalJSON(u.PapertrailLogSink2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// PapertrailLogSinkSinkType - The type of the log sink.
type PapertrailLogSinkSinkType string

const (
	PapertrailLogSinkSinkTypePapertrail PapertrailLogSinkSinkType = "papertrail"
)

func (e PapertrailLogSinkSinkType) ToPointer() *PapertrailLogSinkSinkType {
	return &e
}

func (e *PapertrailLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "papertrail":
		*e = PapertrailLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PapertrailLogSinkSinkType: %v", v)
	}
}

// PapertrailLogSink - Create a log sink using Papertrail
type PapertrailLogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Papertrail Sink Schema.
	SinkData PapertrailLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType PapertrailLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (p PapertrailLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PapertrailLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PapertrailLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PapertrailLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *PapertrailLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PapertrailLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *PapertrailLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *PapertrailLogSink) GetSinkData() PapertrailLogSinkSinkData {
	if o == nil {
		return PapertrailLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *PapertrailLogSink) GetSinkType() PapertrailLogSinkSinkType {
	if o == nil {
		return PapertrailLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *PapertrailLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
