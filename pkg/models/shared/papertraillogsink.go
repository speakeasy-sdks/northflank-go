// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// PapertrailLogSinkSinkData2AuthenticationStrategy - The authentication strategy.
type PapertrailLogSinkSinkData2AuthenticationStrategy string

const (
	PapertrailLogSinkSinkData2AuthenticationStrategyToken PapertrailLogSinkSinkData2AuthenticationStrategy = "token"
)

func (e PapertrailLogSinkSinkData2AuthenticationStrategy) ToPointer() *PapertrailLogSinkSinkData2AuthenticationStrategy {
	return &e
}

func (e *PapertrailLogSinkSinkData2AuthenticationStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = PapertrailLogSinkSinkData2AuthenticationStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PapertrailLogSinkSinkData2AuthenticationStrategy: %v", v)
	}
}

// PapertrailLogSinkSinkData2 - Authenticate with a token.
type PapertrailLogSinkSinkData2 struct {
	// The authentication strategy.
	AuthenticationStrategy PapertrailLogSinkSinkData2AuthenticationStrategy `json:"authenticationStrategy"`
	// The HTTP Token for the Papertrail log destination.
	Token string `json:"token"`
	// The uri for the Papertrail log destination.
	URI string `json:"uri"`
}

func (o *PapertrailLogSinkSinkData2) GetAuthenticationStrategy() PapertrailLogSinkSinkData2AuthenticationStrategy {
	if o == nil {
		return PapertrailLogSinkSinkData2AuthenticationStrategy("")
	}
	return o.AuthenticationStrategy
}

func (o *PapertrailLogSinkSinkData2) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *PapertrailLogSinkSinkData2) GetURI() string {
	if o == nil {
		return ""
	}
	return o.URI
}

// PapertrailLogSinkSinkData1AuthenticationStrategy - The authentication strategy.
type PapertrailLogSinkSinkData1AuthenticationStrategy string

const (
	PapertrailLogSinkSinkData1AuthenticationStrategyPort PapertrailLogSinkSinkData1AuthenticationStrategy = "port"
)

func (e PapertrailLogSinkSinkData1AuthenticationStrategy) ToPointer() *PapertrailLogSinkSinkData1AuthenticationStrategy {
	return &e
}

func (e *PapertrailLogSinkSinkData1AuthenticationStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "port":
		*e = PapertrailLogSinkSinkData1AuthenticationStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PapertrailLogSinkSinkData1AuthenticationStrategy: %v", v)
	}
}

// PapertrailLogSinkSinkData1 - Authenticate with a host/port
type PapertrailLogSinkSinkData1 struct {
	// The authentication strategy.
	AuthenticationStrategy PapertrailLogSinkSinkData1AuthenticationStrategy `json:"authenticationStrategy"`
	// The host for the Papertrail log destination.
	Host string `json:"host"`
	// The port for the Papertrail log destination.
	Port float32 `json:"port"`
}

func (o *PapertrailLogSinkSinkData1) GetAuthenticationStrategy() PapertrailLogSinkSinkData1AuthenticationStrategy {
	if o == nil {
		return PapertrailLogSinkSinkData1AuthenticationStrategy("")
	}
	return o.AuthenticationStrategy
}

func (o *PapertrailLogSinkSinkData1) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *PapertrailLogSinkSinkData1) GetPort() float32 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

type PapertrailLogSinkSinkDataType string

const (
	PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1 PapertrailLogSinkSinkDataType = "PapertrailLogSink_sinkData_1"
	PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2 PapertrailLogSinkSinkDataType = "PapertrailLogSink_sinkData_2"
)

type PapertrailLogSinkSinkData struct {
	PapertrailLogSinkSinkData1 *PapertrailLogSinkSinkData1
	PapertrailLogSinkSinkData2 *PapertrailLogSinkSinkData2

	Type PapertrailLogSinkSinkDataType
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSinkSinkData1(papertrailLogSinkSinkData1 PapertrailLogSinkSinkData1) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1

	return PapertrailLogSinkSinkData{
		PapertrailLogSinkSinkData1: &papertrailLogSinkSinkData1,
		Type:                       typ,
	}
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSinkSinkData2(papertrailLogSinkSinkData2 PapertrailLogSinkSinkData2) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2

	return PapertrailLogSinkSinkData{
		PapertrailLogSinkSinkData2: &papertrailLogSinkSinkData2,
		Type:                       typ,
	}
}

func (u *PapertrailLogSinkSinkData) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	papertrailLogSinkSinkData1 := new(PapertrailLogSinkSinkData1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&papertrailLogSinkSinkData1); err == nil {
		u.PapertrailLogSinkSinkData1 = papertrailLogSinkSinkData1
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1
		return nil
	}

	papertrailLogSinkSinkData2 := new(PapertrailLogSinkSinkData2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&papertrailLogSinkSinkData2); err == nil {
		u.PapertrailLogSinkSinkData2 = papertrailLogSinkSinkData2
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PapertrailLogSinkSinkData) MarshalJSON() ([]byte, error) {
	if u.PapertrailLogSinkSinkData1 != nil {
		return json.Marshal(u.PapertrailLogSinkSinkData1)
	}

	if u.PapertrailLogSinkSinkData2 != nil {
		return json.Marshal(u.PapertrailLogSinkSinkData2)
	}

	return nil, errors.New("could not marshal union type: all fields are null")

}

// PapertrailLogSinkSinkType - The type of the log sink.
type PapertrailLogSinkSinkType string

const (
	PapertrailLogSinkSinkTypePapertrail PapertrailLogSinkSinkType = "papertrail"
)

func (e PapertrailLogSinkSinkType) ToPointer() *PapertrailLogSinkSinkType {
	return &e
}

func (e *PapertrailLogSinkSinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "papertrail":
		*e = PapertrailLogSinkSinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PapertrailLogSinkSinkType: %v", v)
	}
}

// PapertrailLogSink - Create a log sink using Papertrail
type PapertrailLogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `json:"forwardAccessLogs,omitempty"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `json:"restricted,omitempty"`
	// Papertrail Sink Schema.
	SinkData PapertrailLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	SinkType PapertrailLogSinkSinkType `json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `json:"useCustomLabels,omitempty"`
}

func (o *PapertrailLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PapertrailLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *PapertrailLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PapertrailLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *PapertrailLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *PapertrailLogSink) GetSinkData() PapertrailLogSinkSinkData {
	if o == nil {
		return PapertrailLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *PapertrailLogSink) GetSinkType() PapertrailLogSinkSinkType {
	if o == nil {
		return PapertrailLogSinkSinkType("")
	}
	return o.SinkType
}

func (o *PapertrailLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
