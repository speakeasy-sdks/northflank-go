// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// PapertrailLogSinkSinkData2 - Authenticate with a token.
type PapertrailLogSinkSinkData2 struct {
	// The authentication strategy.
	authenticationStrategy string `const:"token" json:"authenticationStrategy"`
	// The HTTP Token for the Papertrail log destination.
	Token string `json:"token"`
	// The uri for the Papertrail log destination.
	URI string `json:"uri"`
}

func (p PapertrailLogSinkSinkData2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PapertrailLogSinkSinkData2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PapertrailLogSinkSinkData2) GetAuthenticationStrategy() string {
	return "token"
}

func (o *PapertrailLogSinkSinkData2) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *PapertrailLogSinkSinkData2) GetURI() string {
	if o == nil {
		return ""
	}
	return o.URI
}

// PapertrailLogSinkSinkData1 - Authenticate with a host/port
type PapertrailLogSinkSinkData1 struct {
	// The authentication strategy.
	authenticationStrategy string `const:"port" json:"authenticationStrategy"`
	// The host for the Papertrail log destination.
	Host string `json:"host"`
	// The port for the Papertrail log destination.
	Port float32 `json:"port"`
}

func (p PapertrailLogSinkSinkData1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PapertrailLogSinkSinkData1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PapertrailLogSinkSinkData1) GetAuthenticationStrategy() string {
	return "port"
}

func (o *PapertrailLogSinkSinkData1) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *PapertrailLogSinkSinkData1) GetPort() float32 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

type PapertrailLogSinkSinkDataType string

const (
	PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1 PapertrailLogSinkSinkDataType = "PapertrailLogSink_sinkData_1"
	PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2 PapertrailLogSinkSinkDataType = "PapertrailLogSink_sinkData_2"
)

type PapertrailLogSinkSinkData struct {
	PapertrailLogSinkSinkData1 *PapertrailLogSinkSinkData1
	PapertrailLogSinkSinkData2 *PapertrailLogSinkSinkData2

	Type PapertrailLogSinkSinkDataType
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSinkSinkData1(papertrailLogSinkSinkData1 PapertrailLogSinkSinkData1) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1

	return PapertrailLogSinkSinkData{
		PapertrailLogSinkSinkData1: &papertrailLogSinkSinkData1,
		Type:                       typ,
	}
}

func CreatePapertrailLogSinkSinkDataPapertrailLogSinkSinkData2(papertrailLogSinkSinkData2 PapertrailLogSinkSinkData2) PapertrailLogSinkSinkData {
	typ := PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2

	return PapertrailLogSinkSinkData{
		PapertrailLogSinkSinkData2: &papertrailLogSinkSinkData2,
		Type:                       typ,
	}
}

func (u *PapertrailLogSinkSinkData) UnmarshalJSON(data []byte) error {

	papertrailLogSinkSinkData1 := new(PapertrailLogSinkSinkData1)
	if err := utils.UnmarshalJSON(data, &papertrailLogSinkSinkData1, "", true, true); err == nil {
		u.PapertrailLogSinkSinkData1 = papertrailLogSinkSinkData1
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData1
		return nil
	}

	papertrailLogSinkSinkData2 := new(PapertrailLogSinkSinkData2)
	if err := utils.UnmarshalJSON(data, &papertrailLogSinkSinkData2, "", true, true); err == nil {
		u.PapertrailLogSinkSinkData2 = papertrailLogSinkSinkData2
		u.Type = PapertrailLogSinkSinkDataTypePapertrailLogSinkSinkData2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PapertrailLogSinkSinkData) MarshalJSON() ([]byte, error) {
	if u.PapertrailLogSinkSinkData1 != nil {
		return utils.MarshalJSON(u.PapertrailLogSinkSinkData1, "", true)
	}

	if u.PapertrailLogSinkSinkData2 != nil {
		return utils.MarshalJSON(u.PapertrailLogSinkSinkData2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// PapertrailLogSink - Create a log sink using Papertrail
type PapertrailLogSink struct {
	// Description of the log sink.
	Description *string `json:"description,omitempty"`
	// If `true` your network access logs will be forwarded with your workload logs
	ForwardAccessLogs *bool `default:"false" json:"forwardAccessLogs"`
	// Name of the log sink.
	Name string `json:"name"`
	// If `restricted` is `true`, only logs from these projects will be sent to the log sink.
	Projects []string `json:"projects,omitempty"`
	// If `true`, only logs from the projects in `projects` will be sent to the log sink.
	Restricted *bool `default:"false" json:"restricted"`
	// Papertrail Sink Schema.
	SinkData PapertrailLogSinkSinkData `json:"sinkData"`
	// The type of the log sink.
	sinkType string `const:"papertrail" json:"sinkType"`
	// If `true`, we will do additional parsing on your JSON formatted log lines and your extract custom labels
	UseCustomLabels *bool `default:"false" json:"useCustomLabels"`
}

func (p PapertrailLogSink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PapertrailLogSink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PapertrailLogSink) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PapertrailLogSink) GetForwardAccessLogs() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardAccessLogs
}

func (o *PapertrailLogSink) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PapertrailLogSink) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *PapertrailLogSink) GetRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.Restricted
}

func (o *PapertrailLogSink) GetSinkData() PapertrailLogSinkSinkData {
	if o == nil {
		return PapertrailLogSinkSinkData{}
	}
	return o.SinkData
}

func (o *PapertrailLogSink) GetSinkType() string {
	return "papertrail"
}

func (o *PapertrailLogSink) GetUseCustomLabels() *bool {
	if o == nil {
		return nil
	}
	return o.UseCustomLabels
}
