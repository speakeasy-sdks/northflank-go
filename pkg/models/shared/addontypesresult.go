// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// AddonTypesResultDataAddonTypesFeatures - Features supported by this addon type.
type AddonTypesResultDataAddonTypesFeatures struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Whether this addon supports native (dump) backups
	BackupsDump bool `json:"backupsDump"`
	// Whether this addon supports customising the database name.
	CustomDBName bool `json:"customDBName"`
	// Whether this addon supports external connection.
	ExternalAccess bool `json:"externalAccess"`
	// Whether this addon supports addon forking - creating a new addon from an existing addon backup.
	ForkAddon bool `json:"forkAddon"`
	// Whether this addon supports importing from an external backup.
	ImportDump bool `json:"importDump"`
	// Whether this addon supports importing from an existing live database.
	ImportLive bool `json:"importLive"`
	// Whether this addon supports replica scaling.
	ScaleReplicas bool `json:"scaleReplicas"`
	// Whether this addon supports connection via TLS.
	TLS bool `json:"tls"`
}

func (a AddonTypesResultDataAddonTypesFeatures) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultDataAddonTypesFeatures) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetBackupsDump() bool {
	if o == nil {
		return false
	}
	return o.BackupsDump
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetCustomDBName() bool {
	if o == nil {
		return false
	}
	return o.CustomDBName
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetExternalAccess() bool {
	if o == nil {
		return false
	}
	return o.ExternalAccess
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetForkAddon() bool {
	if o == nil {
		return false
	}
	return o.ForkAddon
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetImportDump() bool {
	if o == nil {
		return false
	}
	return o.ImportDump
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetImportLive() bool {
	if o == nil {
		return false
	}
	return o.ImportLive
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetScaleReplicas() bool {
	if o == nil {
		return false
	}
	return o.ScaleReplicas
}

func (o *AddonTypesResultDataAddonTypesFeatures) GetTLS() bool {
	if o == nil {
		return false
	}
	return o.TLS
}

// AddonTypesResultDataAddonTypesResourcesReplicas - Details about replica count options for this addon.
type AddonTypesResultDataAddonTypesResourcesReplicas struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The default replica count for this addon.
	Default float32 `json:"default"`
	// Available options for replica counts for this addon.
	Options []float32 `json:"options"`
}

func (a AddonTypesResultDataAddonTypesResourcesReplicas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultDataAddonTypesResourcesReplicas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultDataAddonTypesResourcesReplicas) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultDataAddonTypesResourcesReplicas) GetDefault() float32 {
	if o == nil {
		return 0.0
	}
	return o.Default
}

func (o *AddonTypesResultDataAddonTypesResourcesReplicas) GetOptions() []float32 {
	if o == nil {
		return []float32{}
	}
	return o.Options
}

// AddonTypesResultDataAddonTypesResourcesStorage - Details about storage size options for this addon.
type AddonTypesResultDataAddonTypesResourcesStorage struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// The default storage value for this addon.
	Default float32 `json:"default"`
	// Available options for storage size for this addon, in MB.
	Options []float32 `json:"options"`
}

func (a AddonTypesResultDataAddonTypesResourcesStorage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultDataAddonTypesResourcesStorage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultDataAddonTypesResourcesStorage) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultDataAddonTypesResourcesStorage) GetDefault() float32 {
	if o == nil {
		return 0.0
	}
	return o.Default
}

func (o *AddonTypesResultDataAddonTypesResourcesStorage) GetOptions() []float32 {
	if o == nil {
		return []float32{}
	}
	return o.Options
}

// AddonTypesResultDataAddonTypesResources - Details about resource options for the addon type.
type AddonTypesResultDataAddonTypesResources struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Details about replica count options for this addon.
	Replicas AddonTypesResultDataAddonTypesResourcesReplicas `json:"replicas"`
	// Details about storage size options for this addon.
	Storage AddonTypesResultDataAddonTypesResourcesStorage `json:"storage"`
}

func (a AddonTypesResultDataAddonTypesResources) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultDataAddonTypesResources) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultDataAddonTypesResources) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultDataAddonTypesResources) GetReplicas() AddonTypesResultDataAddonTypesResourcesReplicas {
	if o == nil {
		return AddonTypesResultDataAddonTypesResourcesReplicas{}
	}
	return o.Replicas
}

func (o *AddonTypesResultDataAddonTypesResources) GetStorage() AddonTypesResultDataAddonTypesResourcesStorage {
	if o == nil {
		return AddonTypesResultDataAddonTypesResourcesStorage{}
	}
	return o.Storage
}

type AddonTypesResultDataAddonTypes struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// A description of the addon.
	Description string `json:"description"`
	// Features supported by this addon type.
	Features *AddonTypesResultDataAddonTypesFeatures `json:"features,omitempty"`
	// A list of available major versions of the addon type.
	Major []string `json:"major"`
	// The name of the addon type.
	Name string `json:"name"`
	// Details about resource options for the addon type.
	Resources AddonTypesResultDataAddonTypesResources `json:"resources"`
	// The identifier for the addon type.
	Type string `json:"type"`
	// A list of available versions of the addon type.
	Versions []string `json:"versions"`
}

func (a AddonTypesResultDataAddonTypes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultDataAddonTypes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultDataAddonTypes) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultDataAddonTypes) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *AddonTypesResultDataAddonTypes) GetFeatures() *AddonTypesResultDataAddonTypesFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

func (o *AddonTypesResultDataAddonTypes) GetMajor() []string {
	if o == nil {
		return []string{}
	}
	return o.Major
}

func (o *AddonTypesResultDataAddonTypes) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AddonTypesResultDataAddonTypes) GetResources() AddonTypesResultDataAddonTypesResources {
	if o == nil {
		return AddonTypesResultDataAddonTypesResources{}
	}
	return o.Resources
}

func (o *AddonTypesResultDataAddonTypes) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AddonTypesResultDataAddonTypes) GetVersions() []string {
	if o == nil {
		return []string{}
	}
	return o.Versions
}

// AddonTypesResultData - Result data.
type AddonTypesResultData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// A list of available addon types.
	AddonTypes []AddonTypesResultDataAddonTypes `json:"addonTypes"`
}

func (a AddonTypesResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResultData) GetAddonTypes() []AddonTypesResultDataAddonTypes {
	if o == nil {
		return []AddonTypesResultDataAddonTypes{}
	}
	return o.AddonTypes
}

// AddonTypesResult - Response object.
type AddonTypesResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data AddonTypesResultData `json:"data"`
}

func (a AddonTypesResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddonTypesResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddonTypesResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AddonTypesResult) GetData() AddonTypesResultData {
	if o == nil {
		return AddonTypesResultData{}
	}
	return o.Data
}
