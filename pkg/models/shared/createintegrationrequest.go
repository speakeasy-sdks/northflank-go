// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateIntegrationRequestCredentials - Cloud provider credential input, required fields dependent on which provider is chosen.
type CreateIntegrationRequestCredentials struct {
	// AWS access key.
	AccessKey *string `json:"accessKey,omitempty"`
	// DO API key.
	APIKey *string `json:"apiKey,omitempty"`
	// Contents of a GCP key file.
	KeyfileJSON *string `json:"keyfileJson,omitempty"`
	// AWS secret key.
	SecretKey *string `json:"secretKey,omitempty"`
}

func (o *CreateIntegrationRequestCredentials) GetAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AccessKey
}

func (o *CreateIntegrationRequestCredentials) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *CreateIntegrationRequestCredentials) GetKeyfileJSON() *string {
	if o == nil {
		return nil
	}
	return o.KeyfileJSON
}

func (o *CreateIntegrationRequestCredentials) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

// CreateIntegrationRequestGcp - GCP specific data. Required when `provider` is `gcp`.
type CreateIntegrationRequestGcp struct {
	// Project ID
	ProjectID string `json:"projectId"`
}

func (o *CreateIntegrationRequestGcp) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// CreateIntegrationRequestProvider - Cloud provider to be used for the selected resource
type CreateIntegrationRequestProvider string

const (
	CreateIntegrationRequestProviderGcp   CreateIntegrationRequestProvider = "gcp"
	CreateIntegrationRequestProviderAws   CreateIntegrationRequestProvider = "aws"
	CreateIntegrationRequestProviderAzure CreateIntegrationRequestProvider = "azure"
	CreateIntegrationRequestProviderDo    CreateIntegrationRequestProvider = "do"
)

func (e CreateIntegrationRequestProvider) ToPointer() *CreateIntegrationRequestProvider {
	return &e
}

func (e *CreateIntegrationRequestProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcp":
		fallthrough
	case "aws":
		fallthrough
	case "azure":
		fallthrough
	case "do":
		*e = CreateIntegrationRequestProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIntegrationRequestProvider: %v", v)
	}
}

type CreateIntegrationRequest struct {
	// Cloud provider credential input, required fields dependent on which provider is chosen.
	Credentials CreateIntegrationRequestCredentials `json:"credentials"`
	// The description of the integration.
	Description *string `json:"description,omitempty"`
	// GCP specific data. Required when `provider` is `gcp`.
	Gcp *CreateIntegrationRequestGcp `json:"gcp,omitempty"`
	// The name of the cloud provider integration.
	Name string `json:"name"`
	// Cloud provider to be used for the selected resource
	Provider CreateIntegrationRequestProvider `json:"provider"`
}

func (o *CreateIntegrationRequest) GetCredentials() CreateIntegrationRequestCredentials {
	if o == nil {
		return CreateIntegrationRequestCredentials{}
	}
	return o.Credentials
}

func (o *CreateIntegrationRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateIntegrationRequest) GetGcp() *CreateIntegrationRequestGcp {
	if o == nil {
		return nil
	}
	return o.Gcp
}

func (o *CreateIntegrationRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateIntegrationRequest) GetProvider() CreateIntegrationRequestProvider {
	if o == nil {
		return CreateIntegrationRequestProvider("")
	}
	return o.Provider
}
