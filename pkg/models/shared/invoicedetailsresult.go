// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
)

// InvoiceDetailsResultDataPeriod - Information about the billing period of the invoice.
type InvoiceDetailsResultDataPeriod struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Unix timestamp of the end of the billing period.
	End float32 `json:"end"`
	// Unix timestamp of the start of the billing period.
	Start float32 `json:"start"`
}

func (i InvoiceDetailsResultDataPeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataPeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataPeriod) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataPeriod) GetEnd() float32 {
	if o == nil {
		return 0.0
	}
	return o.End
}

func (o *InvoiceDetailsResultDataPeriod) GetStart() float32 {
	if o == nil {
		return 0.0
	}
	return o.Start
}

// InvoiceDetailsResultDataProjectsItemsNfObjectType - The type of the object.
type InvoiceDetailsResultDataProjectsItemsNfObjectType string

const (
	InvoiceDetailsResultDataProjectsItemsNfObjectTypeJob     InvoiceDetailsResultDataProjectsItemsNfObjectType = "job"
	InvoiceDetailsResultDataProjectsItemsNfObjectTypeService InvoiceDetailsResultDataProjectsItemsNfObjectType = "service"
	InvoiceDetailsResultDataProjectsItemsNfObjectTypeAddon   InvoiceDetailsResultDataProjectsItemsNfObjectType = "addon"
	InvoiceDetailsResultDataProjectsItemsNfObjectTypeVolume  InvoiceDetailsResultDataProjectsItemsNfObjectType = "volume"
)

func (e InvoiceDetailsResultDataProjectsItemsNfObjectType) ToPointer() *InvoiceDetailsResultDataProjectsItemsNfObjectType {
	return &e
}

func (e *InvoiceDetailsResultDataProjectsItemsNfObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "job":
		fallthrough
	case "service":
		fallthrough
	case "addon":
		fallthrough
	case "volume":
		*e = InvoiceDetailsResultDataProjectsItemsNfObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceDetailsResultDataProjectsItemsNfObjectType: %v", v)
	}
}

// InvoiceDetailsResultDataProjectsItemsPrice - Details about the price of a object, broken down by resource type.
type InvoiceDetailsResultDataProjectsItemsPrice struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Price of CPU usage for this object, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for this object, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for this object, in cents.
	Storage float32 `json:"storage"`
	// Total price for this object, in cents.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultDataProjectsItemsPrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsItemsPrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsItemsPrice) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsItemsPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultDataProjectsItemsPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultDataProjectsItemsPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultDataProjectsItemsPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// InvoiceDetailsResultDataProjectsItems - Billing details about an object.
type InvoiceDetailsResultDataProjectsItems struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Duration the object has been running in this billing period, in seconds.
	Duration string `json:"duration"`
	// The ID of the object.
	NfObjectID string `json:"nfObjectId"`
	// The type of the object.
	NfObjectType InvoiceDetailsResultDataProjectsItemsNfObjectType `json:"nfObjectType"`
	// Details about the price of a object, broken down by resource type.
	Price InvoiceDetailsResultDataProjectsItemsPrice `json:"price"`
}

func (i InvoiceDetailsResultDataProjectsItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsItems) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsItems) GetDuration() string {
	if o == nil {
		return ""
	}
	return o.Duration
}

func (o *InvoiceDetailsResultDataProjectsItems) GetNfObjectID() string {
	if o == nil {
		return ""
	}
	return o.NfObjectID
}

func (o *InvoiceDetailsResultDataProjectsItems) GetNfObjectType() InvoiceDetailsResultDataProjectsItemsNfObjectType {
	if o == nil {
		return InvoiceDetailsResultDataProjectsItemsNfObjectType("")
	}
	return o.NfObjectType
}

func (o *InvoiceDetailsResultDataProjectsItems) GetPrice() InvoiceDetailsResultDataProjectsItemsPrice {
	if o == nil {
		return InvoiceDetailsResultDataProjectsItemsPrice{}
	}
	return o.Price
}

// InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice - Details about the price for all addons in this project, broken down by resource type.
type InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Price of CPU usage for all addons in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all addons in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all addons in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all addons in this project, in cents.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Duration addons have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all addons in this project, broken down by resource type.
	Price *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice `json:"price,omitempty"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon) GetPrice() *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddonPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice - Details about the price for all jobs in this project, broken down by resource type.
type InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Price of CPU usage for all jobs in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all jobs in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all jobs in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all jobs in this project, in cents.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type InvoiceDetailsResultDataProjectsObjectTypeTotalsJob struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Duration jobs have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all jobs in this project, broken down by resource type.
	Price *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice `json:"price,omitempty"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsJob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob) GetPrice() *InvoiceDetailsResultDataProjectsObjectTypeTotalsJobPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice - Details about the price for all services in this project, broken down by resource type.
type InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Price of CPU usage for all services in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all services in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all services in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all services in this project, in cents.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type InvoiceDetailsResultDataProjectsObjectTypeTotalsService struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Duration services have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all services in this project, broken down by resource type.
	Price *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice `json:"price,omitempty"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotalsService) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotalsService) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsService) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsService) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotalsService) GetPrice() *InvoiceDetailsResultDataProjectsObjectTypeTotalsServicePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// InvoiceDetailsResultDataProjectsObjectTypeTotals - Details about the price of a project, broken down by object type.
type InvoiceDetailsResultDataProjectsObjectTypeTotals struct {
	AdditionalProperties map[string]interface{}                                   `additionalProperties:"true" json:"-"`
	Addon                *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon   `json:"addon,omitempty"`
	Job                  *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob     `json:"job,omitempty"`
	Service              *InvoiceDetailsResultDataProjectsObjectTypeTotalsService `json:"service,omitempty"`
}

func (i InvoiceDetailsResultDataProjectsObjectTypeTotals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsObjectTypeTotals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotals) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotals) GetAddon() *InvoiceDetailsResultDataProjectsObjectTypeTotalsAddon {
	if o == nil {
		return nil
	}
	return o.Addon
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotals) GetJob() *InvoiceDetailsResultDataProjectsObjectTypeTotalsJob {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *InvoiceDetailsResultDataProjectsObjectTypeTotals) GetService() *InvoiceDetailsResultDataProjectsObjectTypeTotalsService {
	if o == nil {
		return nil
	}
	return o.Service
}

// InvoiceDetailsResultDataProjectsPrice - Details about the price of a project, broken down by resource type.
type InvoiceDetailsResultDataProjectsPrice struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Price of CPU usage for this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for this project, in cents.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultDataProjectsPrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjectsPrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjectsPrice) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjectsPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultDataProjectsPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultDataProjectsPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultDataProjectsPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// InvoiceDetailsResultDataProjects - Billing details about a project.
type InvoiceDetailsResultDataProjects struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Duration the project has been running in this billing period, in seconds.
	Duration string `json:"duration"`
	// An array of objects belonging to this project that are billed in this invoice. If `addonId`, `serviceId` or `jobId` are passed in, only objects matching that ID will be returned.
	Items []InvoiceDetailsResultDataProjectsItems `json:"items"`
	// Details about the price of a project, broken down by object type.
	ObjectTypeTotals InvoiceDetailsResultDataProjectsObjectTypeTotals `json:"objectTypeTotals"`
	// Details about the price of a project, broken down by resource type.
	Price InvoiceDetailsResultDataProjectsPrice `json:"price"`
	// ID of the project.
	ProjectID string `json:"projectId"`
}

func (i InvoiceDetailsResultDataProjects) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataProjects) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataProjects) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataProjects) GetDuration() string {
	if o == nil {
		return ""
	}
	return o.Duration
}

func (o *InvoiceDetailsResultDataProjects) GetItems() []InvoiceDetailsResultDataProjectsItems {
	if o == nil {
		return []InvoiceDetailsResultDataProjectsItems{}
	}
	return o.Items
}

func (o *InvoiceDetailsResultDataProjects) GetObjectTypeTotals() InvoiceDetailsResultDataProjectsObjectTypeTotals {
	if o == nil {
		return InvoiceDetailsResultDataProjectsObjectTypeTotals{}
	}
	return o.ObjectTypeTotals
}

func (o *InvoiceDetailsResultDataProjects) GetPrice() InvoiceDetailsResultDataProjectsPrice {
	if o == nil {
		return InvoiceDetailsResultDataProjectsPrice{}
	}
	return o.Price
}

func (o *InvoiceDetailsResultDataProjects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// InvoiceDetailsResultDataTax - Details about the tax on the invoice.
type InvoiceDetailsResultDataTax struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Percentage of subtotal to be applied as tax.
	Percent float32 `json:"percent"`
	// Value of the tax on the invoice.
	Value float32 `json:"value"`
}

func (i InvoiceDetailsResultDataTax) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultDataTax) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultDataTax) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultDataTax) GetPercent() float32 {
	if o == nil {
		return 0.0
	}
	return o.Percent
}

func (o *InvoiceDetailsResultDataTax) GetValue() float32 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

// InvoiceDetailsResultData - Result data.
type InvoiceDetailsResultData struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Currency code for the currency the invoice is billed in.
	Currency string `json:"currency"`
	// If `timestamp` is passed in, whether the invoice has been paid.
	Paid *bool `json:"paid,omitempty"`
	// Information about the billing period of the invoice.
	Period InvoiceDetailsResultDataPeriod `json:"period"`
	// An array of projects billed in this invoice. If `projectId` is passed in, only projects with a `projectId` matching the value will be returned.
	Projects []InvoiceDetailsResultDataProjects `json:"projects"`
	// Total cost of the invoice, in cents, excluding tax.
	SubTotal float32 `json:"subTotal"`
	// Details about the tax on the invoice.
	Tax InvoiceDetailsResultDataTax `json:"tax"`
	// Total cost of the invoice, in cents, including tax.
	Total float32 `json:"total"`
}

func (i InvoiceDetailsResultData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResultData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResultData) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResultData) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *InvoiceDetailsResultData) GetPaid() *bool {
	if o == nil {
		return nil
	}
	return o.Paid
}

func (o *InvoiceDetailsResultData) GetPeriod() InvoiceDetailsResultDataPeriod {
	if o == nil {
		return InvoiceDetailsResultDataPeriod{}
	}
	return o.Period
}

func (o *InvoiceDetailsResultData) GetProjects() []InvoiceDetailsResultDataProjects {
	if o == nil {
		return []InvoiceDetailsResultDataProjects{}
	}
	return o.Projects
}

func (o *InvoiceDetailsResultData) GetSubTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.SubTotal
}

func (o *InvoiceDetailsResultData) GetTax() InvoiceDetailsResultDataTax {
	if o == nil {
		return InvoiceDetailsResultDataTax{}
	}
	return o.Tax
}

func (o *InvoiceDetailsResultData) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// InvoiceDetailsResult - Response object.
type InvoiceDetailsResult struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Result data.
	Data InvoiceDetailsResultData `json:"data"`
}

func (i InvoiceDetailsResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceDetailsResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceDetailsResult) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InvoiceDetailsResult) GetData() InvoiceDetailsResultData {
	if o == nil {
		return InvoiceDetailsResultData{}
	}
	return o.Data
}
