// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Period - Information about the billing period of the invoice.
type Period struct {
	// Unix timestamp of the end of the billing period.
	End float32 `json:"end"`
	// Unix timestamp of the start of the billing period.
	Start float32 `json:"start"`
}

func (o *Period) GetEnd() float32 {
	if o == nil {
		return 0.0
	}
	return o.End
}

func (o *Period) GetStart() float32 {
	if o == nil {
		return 0.0
	}
	return o.Start
}

// NfObjectType - The type of the object.
type NfObjectType string

const (
	NfObjectTypeJob     NfObjectType = "job"
	NfObjectTypeService NfObjectType = "service"
	NfObjectTypeAddon   NfObjectType = "addon"
	NfObjectTypeVolume  NfObjectType = "volume"
)

func (e NfObjectType) ToPointer() *NfObjectType {
	return &e
}

func (e *NfObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "job":
		fallthrough
	case "service":
		fallthrough
	case "addon":
		fallthrough
	case "volume":
		*e = NfObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NfObjectType: %v", v)
	}
}

// InvoiceDetailsResultPrice - Details about the price of a object, broken down by resource type.
type InvoiceDetailsResultPrice struct {
	// Price of CPU usage for this object, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for this object, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for this object, in cents.
	Storage float32 `json:"storage"`
	// Total price for this object, in cents.
	Total float32 `json:"total"`
}

func (o *InvoiceDetailsResultPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// Items - Billing details about an object.
type Items struct {
	// Duration the object has been running in this billing period, in seconds.
	Duration string `json:"duration"`
	// The ID of the object.
	NfObjectID string `json:"nfObjectId"`
	// The type of the object.
	NfObjectType NfObjectType `json:"nfObjectType"`
	// Details about the price of a object, broken down by resource type.
	Price InvoiceDetailsResultPrice `json:"price"`
}

func (o *Items) GetDuration() string {
	if o == nil {
		return ""
	}
	return o.Duration
}

func (o *Items) GetNfObjectID() string {
	if o == nil {
		return ""
	}
	return o.NfObjectID
}

func (o *Items) GetNfObjectType() NfObjectType {
	if o == nil {
		return NfObjectType("")
	}
	return o.NfObjectType
}

func (o *Items) GetPrice() InvoiceDetailsResultPrice {
	if o == nil {
		return InvoiceDetailsResultPrice{}
	}
	return o.Price
}

// InvoiceDetailsResultSchemasPrice - Details about the price for all addons in this project, broken down by resource type.
type InvoiceDetailsResultSchemasPrice struct {
	// Price of CPU usage for all addons in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all addons in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all addons in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all addons in this project, in cents.
	Total float32 `json:"total"`
}

func (o *InvoiceDetailsResultSchemasPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultSchemasPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultSchemasPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultSchemasPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type Addon struct {
	// Duration addons have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all addons in this project, broken down by resource type.
	Price *InvoiceDetailsResultSchemasPrice `json:"price,omitempty"`
}

func (o *Addon) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *Addon) GetPrice() *InvoiceDetailsResultSchemasPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// InvoiceDetailsResultSchemasDataPrice - Details about the price for all jobs in this project, broken down by resource type.
type InvoiceDetailsResultSchemasDataPrice struct {
	// Price of CPU usage for all jobs in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all jobs in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all jobs in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all jobs in this project, in cents.
	Total float32 `json:"total"`
}

func (o *InvoiceDetailsResultSchemasDataPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultSchemasDataPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultSchemasDataPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultSchemasDataPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type Job struct {
	// Duration jobs have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all jobs in this project, broken down by resource type.
	Price *InvoiceDetailsResultSchemasDataPrice `json:"price,omitempty"`
}

func (o *Job) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *Job) GetPrice() *InvoiceDetailsResultSchemasDataPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// InvoiceDetailsResultSchemasDataProjectsPrice - Details about the price for all services in this project, broken down by resource type.
type InvoiceDetailsResultSchemasDataProjectsPrice struct {
	// Price of CPU usage for all services in this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for all services in this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for all services in this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for all services in this project, in cents.
	Total float32 `json:"total"`
}

func (o *InvoiceDetailsResultSchemasDataProjectsPrice) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *InvoiceDetailsResultSchemasDataProjectsPrice) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *InvoiceDetailsResultSchemasDataProjectsPrice) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *InvoiceDetailsResultSchemasDataProjectsPrice) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

type Service struct {
	// Duration services have been running in this billing period, in seconds.
	Duration float32 `json:"duration"`
	// Details about the price for all services in this project, broken down by resource type.
	Price *InvoiceDetailsResultSchemasDataProjectsPrice `json:"price,omitempty"`
}

func (o *Service) GetDuration() float32 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *Service) GetPrice() *InvoiceDetailsResultSchemasDataProjectsPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// ObjectTypeTotals - Details about the price of a project, broken down by object type.
type ObjectTypeTotals struct {
	Addon   *Addon   `json:"addon,omitempty"`
	Job     *Job     `json:"job,omitempty"`
	Service *Service `json:"service,omitempty"`
}

func (o *ObjectTypeTotals) GetAddon() *Addon {
	if o == nil {
		return nil
	}
	return o.Addon
}

func (o *ObjectTypeTotals) GetJob() *Job {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *ObjectTypeTotals) GetService() *Service {
	if o == nil {
		return nil
	}
	return o.Service
}

// Price - Details about the price of a project, broken down by resource type.
type Price struct {
	// Price of CPU usage for this project, in cents.
	CPU float32 `json:"cpu"`
	// Price of memory usage for this project, in cents.
	Memory float32 `json:"memory"`
	// Price of storage usage for this project, in cents.
	Storage float32 `json:"storage"`
	// Total price for this project, in cents.
	Total float32 `json:"total"`
}

func (o *Price) GetCPU() float32 {
	if o == nil {
		return 0.0
	}
	return o.CPU
}

func (o *Price) GetMemory() float32 {
	if o == nil {
		return 0.0
	}
	return o.Memory
}

func (o *Price) GetStorage() float32 {
	if o == nil {
		return 0.0
	}
	return o.Storage
}

func (o *Price) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// Projects - Billing details about a project.
type Projects struct {
	// Duration the project has been running in this billing period, in seconds.
	Duration string `json:"duration"`
	// An array of objects belonging to this project that are billed in this invoice. If `addonId`, `serviceId` or `jobId` are passed in, only objects matching that ID will be returned.
	Items []Items `json:"items"`
	// Details about the price of a project, broken down by object type.
	ObjectTypeTotals ObjectTypeTotals `json:"objectTypeTotals"`
	// Details about the price of a project, broken down by resource type.
	Price Price `json:"price"`
	// ID of the project.
	ProjectID string `json:"projectId"`
}

func (o *Projects) GetDuration() string {
	if o == nil {
		return ""
	}
	return o.Duration
}

func (o *Projects) GetItems() []Items {
	if o == nil {
		return []Items{}
	}
	return o.Items
}

func (o *Projects) GetObjectTypeTotals() ObjectTypeTotals {
	if o == nil {
		return ObjectTypeTotals{}
	}
	return o.ObjectTypeTotals
}

func (o *Projects) GetPrice() Price {
	if o == nil {
		return Price{}
	}
	return o.Price
}

func (o *Projects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// Tax - Details about the tax on the invoice.
type Tax struct {
	// Percentage of subtotal to be applied as tax.
	Percent float32 `json:"percent"`
	// Value of the tax on the invoice.
	Value float32 `json:"value"`
}

func (o *Tax) GetPercent() float32 {
	if o == nil {
		return 0.0
	}
	return o.Percent
}

func (o *Tax) GetValue() float32 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

// InvoiceDetailsResultData - Result data.
type InvoiceDetailsResultData struct {
	// Currency code for the currency the invoice is billed in.
	Currency string `json:"currency"`
	// If `timestamp` is passed in, whether the invoice has been paid.
	Paid *bool `json:"paid,omitempty"`
	// Information about the billing period of the invoice.
	Period Period `json:"period"`
	// An array of projects billed in this invoice. If `projectId` is passed in, only projects with a `projectId` matching the value will be returned.
	Projects []Projects `json:"projects"`
	// Total cost of the invoice, in cents, excluding tax.
	SubTotal float32 `json:"subTotal"`
	// Details about the tax on the invoice.
	Tax Tax `json:"tax"`
	// Total cost of the invoice, in cents, including tax.
	Total float32 `json:"total"`
}

func (o *InvoiceDetailsResultData) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *InvoiceDetailsResultData) GetPaid() *bool {
	if o == nil {
		return nil
	}
	return o.Paid
}

func (o *InvoiceDetailsResultData) GetPeriod() Period {
	if o == nil {
		return Period{}
	}
	return o.Period
}

func (o *InvoiceDetailsResultData) GetProjects() []Projects {
	if o == nil {
		return []Projects{}
	}
	return o.Projects
}

func (o *InvoiceDetailsResultData) GetSubTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.SubTotal
}

func (o *InvoiceDetailsResultData) GetTax() Tax {
	if o == nil {
		return Tax{}
	}
	return o.Tax
}

func (o *InvoiceDetailsResultData) GetTotal() float32 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// InvoiceDetailsResult - Response object.
type InvoiceDetailsResult struct {
	// Result data.
	Data InvoiceDetailsResultData `json:"data"`
}

func (o *InvoiceDetailsResult) GetData() InvoiceDetailsResultData {
	if o == nil {
		return InvoiceDetailsResultData{}
	}
	return o.Data
}
