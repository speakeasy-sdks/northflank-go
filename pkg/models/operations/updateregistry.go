// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/northflank-go/v2/pkg/models/shared"
	"github.com/speakeasy-sdks/northflank-go/v2/pkg/utils"
	"net/http"
)

type UpdateRegistryRequestBodyType string

const (
	UpdateRegistryRequestBodyTypeUpdateRegistryType1 UpdateRegistryRequestBodyType = "UpdateRegistryType1"
	UpdateRegistryRequestBodyTypeUpdateRegistryType2 UpdateRegistryRequestBodyType = "UpdateRegistryType2"
	UpdateRegistryRequestBodyTypeUpdateRegistryType3 UpdateRegistryRequestBodyType = "UpdateRegistryType3"
	UpdateRegistryRequestBodyTypeUpdateRegistryType4 UpdateRegistryRequestBodyType = "UpdateRegistryType4"
)

type UpdateRegistryRequestBody struct {
	UpdateRegistryType1 *shared.UpdateRegistryType1
	UpdateRegistryType2 *shared.UpdateRegistryType2
	UpdateRegistryType3 *shared.UpdateRegistryType3
	UpdateRegistryType4 *shared.UpdateRegistryType4

	Type UpdateRegistryRequestBodyType
}

func CreateUpdateRegistryRequestBodyUpdateRegistryType1(updateRegistryType1 shared.UpdateRegistryType1) UpdateRegistryRequestBody {
	typ := UpdateRegistryRequestBodyTypeUpdateRegistryType1

	return UpdateRegistryRequestBody{
		UpdateRegistryType1: &updateRegistryType1,
		Type:                typ,
	}
}

func CreateUpdateRegistryRequestBodyUpdateRegistryType2(updateRegistryType2 shared.UpdateRegistryType2) UpdateRegistryRequestBody {
	typ := UpdateRegistryRequestBodyTypeUpdateRegistryType2

	return UpdateRegistryRequestBody{
		UpdateRegistryType2: &updateRegistryType2,
		Type:                typ,
	}
}

func CreateUpdateRegistryRequestBodyUpdateRegistryType3(updateRegistryType3 shared.UpdateRegistryType3) UpdateRegistryRequestBody {
	typ := UpdateRegistryRequestBodyTypeUpdateRegistryType3

	return UpdateRegistryRequestBody{
		UpdateRegistryType3: &updateRegistryType3,
		Type:                typ,
	}
}

func CreateUpdateRegistryRequestBodyUpdateRegistryType4(updateRegistryType4 shared.UpdateRegistryType4) UpdateRegistryRequestBody {
	typ := UpdateRegistryRequestBodyTypeUpdateRegistryType4

	return UpdateRegistryRequestBody{
		UpdateRegistryType4: &updateRegistryType4,
		Type:                typ,
	}
}

func (u *UpdateRegistryRequestBody) UnmarshalJSON(data []byte) error {

	updateRegistryType1 := shared.UpdateRegistryType1{}
	if err := utils.UnmarshalJSON(data, &updateRegistryType1, "", true, true); err == nil {
		u.UpdateRegistryType1 = &updateRegistryType1
		u.Type = UpdateRegistryRequestBodyTypeUpdateRegistryType1
		return nil
	}

	updateRegistryType4 := shared.UpdateRegistryType4{}
	if err := utils.UnmarshalJSON(data, &updateRegistryType4, "", true, true); err == nil {
		u.UpdateRegistryType4 = &updateRegistryType4
		u.Type = UpdateRegistryRequestBodyTypeUpdateRegistryType4
		return nil
	}

	updateRegistryType3 := shared.UpdateRegistryType3{}
	if err := utils.UnmarshalJSON(data, &updateRegistryType3, "", true, true); err == nil {
		u.UpdateRegistryType3 = &updateRegistryType3
		u.Type = UpdateRegistryRequestBodyTypeUpdateRegistryType3
		return nil
	}

	updateRegistryType2 := shared.UpdateRegistryType2{}
	if err := utils.UnmarshalJSON(data, &updateRegistryType2, "", true, true); err == nil {
		u.UpdateRegistryType2 = &updateRegistryType2
		u.Type = UpdateRegistryRequestBodyTypeUpdateRegistryType2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateRegistryRequestBody) MarshalJSON() ([]byte, error) {
	if u.UpdateRegistryType1 != nil {
		return utils.MarshalJSON(u.UpdateRegistryType1, "", true)
	}

	if u.UpdateRegistryType2 != nil {
		return utils.MarshalJSON(u.UpdateRegistryType2, "", true)
	}

	if u.UpdateRegistryType3 != nil {
		return utils.MarshalJSON(u.UpdateRegistryType3, "", true)
	}

	if u.UpdateRegistryType4 != nil {
		return utils.MarshalJSON(u.UpdateRegistryType4, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateRegistryRequest struct {
	// Request body
	RequestBody  UpdateRegistryRequestBody `request:"mediaType=application/json"`
	CredentialID string                    `pathParam:"style=simple,explode=false,name=credentialId"`
}

func (o *UpdateRegistryRequest) GetRequestBody() UpdateRegistryRequestBody {
	if o == nil {
		return UpdateRegistryRequestBody{}
	}
	return o.RequestBody
}

func (o *UpdateRegistryRequest) GetCredentialID() string {
	if o == nil {
		return ""
	}
	return o.CredentialID
}

type UpdateRegistryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The operation was performed successfully.
	SuccessResult *shared.SuccessResult
}

func (o *UpdateRegistryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateRegistryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateRegistryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateRegistryResponse) GetSuccessResult() *shared.SuccessResult {
	if o == nil {
		return nil
	}
	return o.SuccessResult
}
