// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/speakeasy-sdks/northflank-go/pkg/models/shared"
	"net/http"
)

type CreateLogSinkRequestBodyType string

const (
	CreateLogSinkRequestBodyTypeLokiLogSink       CreateLogSinkRequestBodyType = "LokiLogSink"
	CreateLogSinkRequestBodyTypeDatadogLogSink    CreateLogSinkRequestBodyType = "DatadogLogSink"
	CreateLogSinkRequestBodyTypePapertrailLogSink CreateLogSinkRequestBodyType = "PapertrailLogSink"
	CreateLogSinkRequestBodyTypeAWSLogSink        CreateLogSinkRequestBodyType = "AWSLogSink"
	CreateLogSinkRequestBodyTypeHTTPLogSink       CreateLogSinkRequestBodyType = "HTTPLogSink"
	CreateLogSinkRequestBodyTypeDNALogSink        CreateLogSinkRequestBodyType = "DNALogSink"
	CreateLogSinkRequestBodyTypeLogtailLogSink    CreateLogSinkRequestBodyType = "LogtailLogSink"
	CreateLogSinkRequestBodyTypeHoneycombLogSink  CreateLogSinkRequestBodyType = "HoneycombLogSink"
	CreateLogSinkRequestBodyTypeLogioLogSink      CreateLogSinkRequestBodyType = "LogioLogSink"
)

type CreateLogSinkRequestBody struct {
	LokiLogSink       *shared.LokiLogSink
	DatadogLogSink    *shared.DatadogLogSink
	PapertrailLogSink *shared.PapertrailLogSink
	AWSLogSink        *shared.AWSLogSink
	HTTPLogSink       *shared.HTTPLogSink
	DNALogSink        *shared.DNALogSink
	LogtailLogSink    *shared.LogtailLogSink
	HoneycombLogSink  *shared.HoneycombLogSink
	LogioLogSink      *shared.LogioLogSink

	Type CreateLogSinkRequestBodyType
}

func CreateCreateLogSinkRequestBodyLokiLogSink(lokiLogSink shared.LokiLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeLokiLogSink

	return CreateLogSinkRequestBody{
		LokiLogSink: &lokiLogSink,
		Type:        typ,
	}
}

func CreateCreateLogSinkRequestBodyDatadogLogSink(datadogLogSink shared.DatadogLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeDatadogLogSink

	return CreateLogSinkRequestBody{
		DatadogLogSink: &datadogLogSink,
		Type:           typ,
	}
}

func CreateCreateLogSinkRequestBodyPapertrailLogSink(papertrailLogSink shared.PapertrailLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypePapertrailLogSink

	return CreateLogSinkRequestBody{
		PapertrailLogSink: &papertrailLogSink,
		Type:              typ,
	}
}

func CreateCreateLogSinkRequestBodyAWSLogSink(awsLogSink shared.AWSLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeAWSLogSink

	return CreateLogSinkRequestBody{
		AWSLogSink: &awsLogSink,
		Type:       typ,
	}
}

func CreateCreateLogSinkRequestBodyHTTPLogSink(httpLogSink shared.HTTPLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeHTTPLogSink

	return CreateLogSinkRequestBody{
		HTTPLogSink: &httpLogSink,
		Type:        typ,
	}
}

func CreateCreateLogSinkRequestBodyDNALogSink(dnaLogSink shared.DNALogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeDNALogSink

	return CreateLogSinkRequestBody{
		DNALogSink: &dnaLogSink,
		Type:       typ,
	}
}

func CreateCreateLogSinkRequestBodyLogtailLogSink(logtailLogSink shared.LogtailLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeLogtailLogSink

	return CreateLogSinkRequestBody{
		LogtailLogSink: &logtailLogSink,
		Type:           typ,
	}
}

func CreateCreateLogSinkRequestBodyHoneycombLogSink(honeycombLogSink shared.HoneycombLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeHoneycombLogSink

	return CreateLogSinkRequestBody{
		HoneycombLogSink: &honeycombLogSink,
		Type:             typ,
	}
}

func CreateCreateLogSinkRequestBodyLogioLogSink(logioLogSink shared.LogioLogSink) CreateLogSinkRequestBody {
	typ := CreateLogSinkRequestBodyTypeLogioLogSink

	return CreateLogSinkRequestBody{
		LogioLogSink: &logioLogSink,
		Type:         typ,
	}
}

func (u *CreateLogSinkRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	lokiLogSink := new(shared.LokiLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&lokiLogSink); err == nil {
		u.LokiLogSink = lokiLogSink
		u.Type = CreateLogSinkRequestBodyTypeLokiLogSink
		return nil
	}

	datadogLogSink := new(shared.DatadogLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&datadogLogSink); err == nil {
		u.DatadogLogSink = datadogLogSink
		u.Type = CreateLogSinkRequestBodyTypeDatadogLogSink
		return nil
	}

	papertrailLogSink := new(shared.PapertrailLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&papertrailLogSink); err == nil {
		u.PapertrailLogSink = papertrailLogSink
		u.Type = CreateLogSinkRequestBodyTypePapertrailLogSink
		return nil
	}

	awsLogSink := new(shared.AWSLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&awsLogSink); err == nil {
		u.AWSLogSink = awsLogSink
		u.Type = CreateLogSinkRequestBodyTypeAWSLogSink
		return nil
	}

	httpLogSink := new(shared.HTTPLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&httpLogSink); err == nil {
		u.HTTPLogSink = httpLogSink
		u.Type = CreateLogSinkRequestBodyTypeHTTPLogSink
		return nil
	}

	dnaLogSink := new(shared.DNALogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dnaLogSink); err == nil {
		u.DNALogSink = dnaLogSink
		u.Type = CreateLogSinkRequestBodyTypeDNALogSink
		return nil
	}

	logtailLogSink := new(shared.LogtailLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&logtailLogSink); err == nil {
		u.LogtailLogSink = logtailLogSink
		u.Type = CreateLogSinkRequestBodyTypeLogtailLogSink
		return nil
	}

	honeycombLogSink := new(shared.HoneycombLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&honeycombLogSink); err == nil {
		u.HoneycombLogSink = honeycombLogSink
		u.Type = CreateLogSinkRequestBodyTypeHoneycombLogSink
		return nil
	}

	logioLogSink := new(shared.LogioLogSink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&logioLogSink); err == nil {
		u.LogioLogSink = logioLogSink
		u.Type = CreateLogSinkRequestBodyTypeLogioLogSink
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateLogSinkRequestBody) MarshalJSON() ([]byte, error) {
	if u.LokiLogSink != nil {
		return json.Marshal(u.LokiLogSink)
	}

	if u.DatadogLogSink != nil {
		return json.Marshal(u.DatadogLogSink)
	}

	if u.PapertrailLogSink != nil {
		return json.Marshal(u.PapertrailLogSink)
	}

	if u.AWSLogSink != nil {
		return json.Marshal(u.AWSLogSink)
	}

	if u.HTTPLogSink != nil {
		return json.Marshal(u.HTTPLogSink)
	}

	if u.DNALogSink != nil {
		return json.Marshal(u.DNALogSink)
	}

	if u.LogtailLogSink != nil {
		return json.Marshal(u.LogtailLogSink)
	}

	if u.HoneycombLogSink != nil {
		return json.Marshal(u.HoneycombLogSink)
	}

	if u.LogioLogSink != nil {
		return json.Marshal(u.LogioLogSink)
	}

	return nil, nil
}

type CreateLogSinkResponse struct {
	ContentType string
	// Details about a log sink.
	CreateLogSinkResult *shared.CreateLogSinkResult
	StatusCode          int
	RawResponse         *http.Response
}

func (o *CreateLogSinkResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateLogSinkResponse) GetCreateLogSinkResult() *shared.CreateLogSinkResult {
	if o == nil {
		return nil
	}
	return o.CreateLogSinkResult
}

func (o *CreateLogSinkResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateLogSinkResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
