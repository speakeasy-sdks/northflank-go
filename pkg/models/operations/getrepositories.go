// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/northflank-go/pkg/models/shared"
	"github.com/speakeasy-sdks/northflank-go/pkg/utils"
	"net/http"
)

// GetRepositoriesVcsService - If provided, only returns repositories belonging to this version control provider.
type GetRepositoriesVcsService string

const (
	GetRepositoriesVcsServiceBitbucket  GetRepositoriesVcsService = "bitbucket"
	GetRepositoriesVcsServiceGitlab     GetRepositoriesVcsService = "gitlab"
	GetRepositoriesVcsServiceGithub     GetRepositoriesVcsService = "github"
	GetRepositoriesVcsServiceSelfHosted GetRepositoriesVcsService = "self-hosted"
)

func (e GetRepositoriesVcsService) ToPointer() *GetRepositoriesVcsService {
	return &e
}

func (e *GetRepositoriesVcsService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		fallthrough
	case "gitlab":
		fallthrough
	case "github":
		fallthrough
	case "self-hosted":
		*e = GetRepositoriesVcsService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesVcsService: %v", v)
	}
}

type GetRepositoriesRequest struct {
	AccountLogin    *string `queryParam:"style=form,explode=true,name=account_login"`
	Cursor          *string `queryParam:"style=form,explode=true,name=cursor"`
	PerPage         *int64  `default:"50" queryParam:"style=form,explode=true,name=per_page"`
	SelfHostedVcsID *string `queryParam:"style=form,explode=true,name=self_hosted_vcs_id"`
	VcsLinkID       *string `queryParam:"style=form,explode=true,name=vcs_link_id"`
	// If provided, only returns repositories belonging to this version control provider.
	VcsService *GetRepositoriesVcsService `queryParam:"style=form,explode=true,name=vcs_service"`
}

func (g GetRepositoriesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRepositoriesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRepositoriesRequest) GetAccountLogin() *string {
	if o == nil {
		return nil
	}
	return o.AccountLogin
}

func (o *GetRepositoriesRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *GetRepositoriesRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetRepositoriesRequest) GetSelfHostedVcsID() *string {
	if o == nil {
		return nil
	}
	return o.SelfHostedVcsID
}

func (o *GetRepositoriesRequest) GetVcsLinkID() *string {
	if o == nil {
		return nil
	}
	return o.VcsLinkID
}

func (o *GetRepositoriesRequest) GetVcsService() *GetRepositoriesVcsService {
	if o == nil {
		return nil
	}
	return o.VcsService
}

type GetRepositoriesResponse struct {
	ContentType string
	// The list of repos.
	RepositoriesResult *shared.RepositoriesResult
	StatusCode         int
	RawResponse        *http.Response
}

func (o *GetRepositoriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRepositoriesResponse) GetRepositoriesResult() *shared.RepositoriesResult {
	if o == nil {
		return nil
	}
	return o.RepositoriesResult
}

func (o *GetRepositoriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRepositoriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
